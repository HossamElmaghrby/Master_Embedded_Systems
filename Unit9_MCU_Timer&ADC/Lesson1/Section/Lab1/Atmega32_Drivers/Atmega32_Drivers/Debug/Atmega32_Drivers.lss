
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001250  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e9  00000000  00000000  000020dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00002ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000903  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000890  00000000  00000000  0000379f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000402f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_10>
  2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_11>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  8a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer0_Compare_Match_interrup_Handler>:

#include "Atmega32_Timer0_Driver.h"
uint16_t Timer_counter = 0;
void Timer0_Compare_Match_interrup_Handler()
{
	Timer_counter++ ;
  92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  96:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
	if(Timer_counter == 10000)
  a4:	80 31       	cpi	r24, 0x10	; 16
  a6:	97 42       	sbci	r25, 0x27	; 39
  a8:	41 f4       	brne	.+16     	; 0xba <Timer0_Compare_Match_interrup_Handler+0x28>
	{
		//Toggle_led every one second
		TOGGLE_BIT(PORTC , 0);
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 27       	eor	r24, r25
  b0:	85 bb       	out	0x15, r24	; 21
		
		//clear counter
		Timer_counter = 0 ;
  b2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
  b6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
  ba:	08 95       	ret

000000bc <main>:
	}
}

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0x6>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <main+0x8>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0xa>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
    DDRC = 0xFF ;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(PORTC , 0);
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	85 bb       	out	0x15, r24	; 21
	
    //Configure timer0
	Timer0_Config Timer0_Config ;
	
	Timer0_Config.Timer0_Mode = Timer0_Mode_CTC ;
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Config.Clock_Select = Timer0_Clock_Internal_Prescaler_8 ;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	8b 83       	std	Y+3, r24	; 0x03
	Timer0_Config.IRQ_Enable = Timer0_IRQ_Compare_Match_Enable ;
  dc:	8c 83       	std	Y+4, r24	; 0x04
	Timer0_Config.Output_Compare =Timer0_Clock_Stop ;
  de:	1a 82       	std	Y+2, r1	; 0x02
	Timer0_Config.P_IRQ_CallBack = Timer0_Compare_Match_interrup_Handler ;
  e0:	89 e4       	ldi	r24, 0x49	; 73
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9e 83       	std	Y+6, r25	; 0x06
  e6:	8d 83       	std	Y+5, r24	; 0x05
	
	//Set compare Value
	MCAL_Timer0_Set_Compare_Value(100);
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCAL_Timer0_Set_Compare_Value>
	
	// initialization Timer0
	MCAL_Timer0_Init(&Timer0_Config);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 a6 00 	call	0x14c	; 0x14c <MCAL_Timer0_Init>
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x3a>

000000f8 <__vector_12>:
			
}

//================IRQ Function Definitions===============
ISR(SPI_STC_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 11a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <G_SPI_Config>
 11e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <G_SPI_Config+0x1>
 122:	07 80       	ldd	r0, Z+7	; 0x07
 124:	f0 85       	ldd	r31, Z+8	; 0x08
 126:	e0 2d       	mov	r30, r0
 128:	09 95       	icall
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <MCAL_Timer0_Init>:
 * Note 			- None
 *
 */
void MCAL_Timer0_Get_Counter_Value(uint8_t *TicksNumber)
{
	*TicksNumber =TCNT0 ;
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	fe 01       	movw	r30, r28
 156:	a8 e6       	ldi	r26, 0x68	; 104
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <MCAL_Timer0_Init+0xe>
 162:	93 b7       	in	r25, 0x33	; 51
 164:	88 81       	ld	r24, Y
 166:	89 2b       	or	r24, r25
 168:	83 bf       	out	0x33, r24	; 51
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	88 23       	and	r24, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <MCAL_Timer0_Init+0x32>
 170:	87 b3       	in	r24, 0x17	; 23
 172:	88 60       	ori	r24, 0x08	; 8
 174:	87 bb       	out	0x17, r24	; 23
 176:	93 b7       	in	r25, 0x33	; 51
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	89 2b       	or	r24, r25
 17c:	83 bf       	out	0x33, r24	; 51
 17e:	93 b7       	in	r25, 0x33	; 51
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	89 2b       	or	r24, r25
 184:	83 bf       	out	0x33, r24	; 51
 186:	87 b3       	in	r24, 0x17	; 23
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	87 bb       	out	0x17, r24	; 23
 18c:	99 b7       	in	r25, 0x39	; 57
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	89 2b       	or	r24, r25
 192:	89 bf       	out	0x39, r24	; 57
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	88 23       	and	r24, r24
 198:	19 f0       	breq	.+6      	; 0x1a0 <MCAL_Timer0_Init+0x54>
 19a:	8f b7       	in	r24, 0x3f	; 63
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	8f bf       	out	0x3f, r24	; 63
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <MCAL_Timer0_Set_Compare_Value>:
 1a6:	8c bf       	out	0x3c, r24	; 60
 1a8:	08 95       	ret

000001aa <__vector_11>:
}

/* OVERFLOW ISR */
ISR(TIMER0_OVF_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	G_timer0_Cfg.P_IRQ_CallBack();
 1cc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <G_timer0_Cfg+0x4>
 1d0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <G_timer0_Cfg+0x5>
 1d4:	09 95       	icall
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_10>:

/* COMPARE MATCH ISR */
ISR(TIMER0_COMP_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	G_timer0_Cfg.P_IRQ_CallBack();
 21a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <G_timer0_Cfg+0x4>
 21e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <G_timer0_Cfg+0x5>
 222:	09 95       	icall
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <MCAL_UART_SendNoBlock>:
	 {
		 
		 UART_Interrupt_Enable_TXCIE;
		 TX_str =str ;
		 MCAL_UART_SendNoBlock(str[0]);
		 flag_send = 0;
 246:	8c b9       	out	0x0c, r24	; 12
 248:	08 95       	ret

0000024a <__vector_15>:
	 }
}

ISR(USART_TXC_vect)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	static uint8 i= 1;
	if(TX_str[i] != 0)
 26c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 270:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TX_str>
 274:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TX_str+0x1>
 278:	e8 0f       	add	r30, r24
 27a:	f1 1d       	adc	r31, r1
 27c:	80 81       	ld	r24, Z
 27e:	88 23       	and	r24, r24
 280:	41 f0       	breq	.+16     	; 0x292 <__vector_15+0x48>
	{
		MCAL_UART_SendNoBlock(TX_str[i]);
 282:	0e 94 23 01 	call	0x246	; 0x246 <MCAL_UART_SendNoBlock>
		i++;
 286:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 290:	05 c0       	rjmp	.+10     	; 0x29c <__vector_15+0x52>
	}
	else
	{
		i=1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		flag_send= 1;
 298:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_send>
	}
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
