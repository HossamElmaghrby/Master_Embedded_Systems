
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002ea  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800062  00800062  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a04  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00002d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c4  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000968  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_10>
  2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_11>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
		Timer_counter = 0 ;
	}
}

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF ;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	
    //Configure timer0
	Timer0_Config Timer0_Config ;
	
	Timer0_Config.Timer0_Mode = Timer0_Mode_Fast_PWM ;
  a4:	88 e4       	ldi	r24, 0x48	; 72
  a6:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Config.Clock_Select = Timer0_Clock_Internal_Prescaler_8 ;
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	8b 83       	std	Y+3, r24	; 0x03
	Timer0_Config.IRQ_Enable = Timer0_IRQ_Compare_Match_Enable ;
  ac:	8c 83       	std	Y+4, r24	; 0x04
	Timer0_Config.Output_Compare =Timer0_OC_Set ;
  ae:	80 e3       	ldi	r24, 0x30	; 48
  b0:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_Config.P_IRQ_CallBack = NULL ;
  b2:	1e 82       	std	Y+6, r1	; 0x06
  b4:	1d 82       	std	Y+5, r1	; 0x05
	
	
	// initialization Timer0
	MCAL_Timer0_Init(&Timer0_Config);
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	0e 94 ba 00 	call	0x174	; 0x174 <MCAL_Timer0_Init>
		
    while (1) 
    {
			//Set compare Value
			MCAL_Timer0_Set_Compare_Value(255);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MCAL_Timer0_Set_Compare_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e3       	ldi	r18, 0x3F	; 63
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x38>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x42>
  d4:	00 00       	nop
			
			_delay_ms(5000);
			
			MCAL_Timer0_Set_Compare_Value(200);
  d6:	88 ec       	ldi	r24, 0xC8	; 200
  d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MCAL_Timer0_Set_Compare_Value>
  dc:	2f eb       	ldi	r18, 0xBF	; 191
  de:	86 ec       	ldi	r24, 0xC6	; 198
  e0:	9d e2       	ldi	r25, 0x2D	; 45
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x50>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5a>
  ec:	00 00       	nop
			
			_delay_ms(15000);
			
			MCAL_Timer0_Set_Compare_Value(100);
  ee:	84 e6       	ldi	r24, 0x64	; 100
  f0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MCAL_Timer0_Set_Compare_Value>
  f4:	2f eb       	ldi	r18, 0xBF	; 191
  f6:	86 ec       	ldi	r24, 0xC6	; 198
  f8:	9d e2       	ldi	r25, 0x2D	; 45
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x68>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x72>
 104:	00 00       	nop

			_delay_ms(15000);
			
			MCAL_Timer0_Set_Compare_Value(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MCAL_Timer0_Set_Compare_Value>
 10c:	2f eb       	ldi	r18, 0xBF	; 191
 10e:	86 ec       	ldi	r24, 0xC6	; 198
 110:	9d e2       	ldi	r25, 0x2D	; 45
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x80>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x8a>
 11c:	00 00       	nop
 11e:	cf cf       	rjmp	.-98     	; 0xbe <main+0x2c>

00000120 <__vector_12>:
			
}

//================IRQ Function Definitions===============
ISR(SPI_STC_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 142:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 146:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 14a:	07 80       	ldd	r0, Z+7	; 0x07
 14c:	f0 85       	ldd	r31, Z+8	; 0x08
 14e:	e0 2d       	mov	r30, r0
 150:	09 95       	icall
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <MCAL_Timer0_Init>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	fe 01       	movw	r30, r28
 17e:	a6 e6       	ldi	r26, 0x66	; 102
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	8a 95       	dec	r24
 188:	e1 f7       	brne	.-8      	; 0x182 <MCAL_Timer0_Init+0xe>
 18a:	93 b7       	in	r25, 0x33	; 51
 18c:	88 81       	ld	r24, Y
 18e:	89 2b       	or	r24, r25
 190:	83 bf       	out	0x33, r24	; 51
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	88 23       	and	r24, r24
 196:	39 f0       	breq	.+14     	; 0x1a6 <MCAL_Timer0_Init+0x32>
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	87 bb       	out	0x17, r24	; 23
 19e:	93 b7       	in	r25, 0x33	; 51
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	89 2b       	or	r24, r25
 1a4:	83 bf       	out	0x33, r24	; 51
 1a6:	93 b7       	in	r25, 0x33	; 51
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	89 2b       	or	r24, r25
 1ac:	83 bf       	out	0x33, r24	; 51
 1ae:	87 b3       	in	r24, 0x17	; 23
 1b0:	8e 7f       	andi	r24, 0xFE	; 254
 1b2:	87 bb       	out	0x17, r24	; 23
 1b4:	99 b7       	in	r25, 0x39	; 57
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	89 2b       	or	r24, r25
 1ba:	89 bf       	out	0x39, r24	; 57
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	88 23       	and	r24, r24
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <MCAL_Timer0_Init+0x54>
 1c2:	8f b7       	in	r24, 0x3f	; 63
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8f bf       	out	0x3f, r24	; 63
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <MCAL_Timer0_Set_Compare_Value>:
 1ce:	8c bf       	out	0x3c, r24	; 60
 1d0:	08 95       	ret

000001d2 <__vector_11>:
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
 1f4:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <G_timer0_Cfg+0x4>
 1f8:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <G_timer0_Cfg+0x5>
 1fc:	09 95       	icall
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_10>:
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
 242:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <G_timer0_Cfg+0x4>
 246:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <G_timer0_Cfg+0x5>
 24a:	09 95       	icall
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <MCAL_UART_SendNoBlock>:
	 {
		 
		 UART_Interrupt_Enable_TXCIE;
		 TX_str =str ;
		 MCAL_UART_SendNoBlock(str[0]);
		 flag_send = 0;
 26e:	8c b9       	out	0x0c, r24	; 12
 270:	08 95       	ret

00000272 <__vector_15>:
	 }
}

ISR(USART_TXC_vect)
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	static uint8 i= 1;
	if(TX_str[i] != 0)
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 298:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TX_str>
 29c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TX_str+0x1>
 2a0:	e8 0f       	add	r30, r24
 2a2:	f1 1d       	adc	r31, r1
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	41 f0       	breq	.+16     	; 0x2ba <__vector_15+0x48>
	{
		MCAL_UART_SendNoBlock(TX_str[i]);
 2aa:	0e 94 37 01 	call	0x26e	; 0x26e <MCAL_UART_SendNoBlock>
		i++;
 2ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <__vector_15+0x52>
	}
	else
	{
		i=1;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		flag_send= 1;
 2c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_send>
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
