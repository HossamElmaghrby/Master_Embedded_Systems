
ARM_Course.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000438  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000568  08000570  00010570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000568  08000568  00010570  2**0
                  CONTENTS
  4 .ARM          00000000  08000568  08000568  00010570  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000568  08000570  00010570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000570  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000570  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a80  00000000  00000000  00010599  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000497  00000000  00000000  00012019  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000063c  00000000  00000000  000124b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000120  00000000  00000000  00012af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00012c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000016f2  00000000  00000000  00012d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000f36  00000000  00000000  000143fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000ebbf  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023eef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000378  00000000  00000000  00023f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000550 	.word	0x08000550

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000550 	.word	0x08000550

08000170 <EXTI0_IRQHandler>:
/* ================================================ */
/* =============== ISR Functions ================== */
/* ================================================ */

void EXTI0_IRQHandler()         			/* EXTI Line0 interrupt  */
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
    EXTI->PR |=(1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
    GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()         			/* EXTI Line1 interrupt  */
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()          			/* EXTI Line2 interrupt  */
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()          			/* EXTI Line3 interrupt  */
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()                     /* EXTI Line4 interrupt  */
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000020 	.word	0x20000020

08000224 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000020 	.word	0x20000020

08000390 <HardFault_Handler>:
				"MSR CONTROL , r0");  \
				break ;  \
		}

void HardFault_Handler()
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <MemManage_Handler>:
void MemManage_Handler()
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <BusFault_Handler>:
void BusFault_Handler()
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <UsageFault_Handler>:
void UsageFault_Handler()
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <OS_SVC_Services>:
		flag = 0 ;
	}
}

void OS_SVC_Services(int* StackFramePointer)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	//OS_SVC_Stack r0 ,r1,r2,r3 ,r12,LR ,PC ,XPSR

	uint8_t SVC_number ;
	uint8_t Val1 ,Val2 ;

	SVC_number = *((uint8_t*)(((uint8_t*)StackFramePointer [6])-2));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3318      	adds	r3, #24
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3b02      	subs	r3, #2
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	73fb      	strb	r3, [r7, #15]
	Val1 = StackFramePointer[0];
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	73bb      	strb	r3, [r7, #14]
	Val2 = StackFramePointer[1];
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3304      	adds	r3, #4
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	737b      	strb	r3, [r7, #13]

	switch(SVC_number)
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d00a      	beq.n	80003fe <OS_SVC_Services+0x3e>
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d00e      	beq.n	800040a <OS_SVC_Services+0x4a>
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d000      	beq.n	80003f2 <OS_SVC_Services+0x32>
		break ;
	case 3 : //MULL
		StackFramePointer[0] = Val1 * Val2 ;
		break ;
	}
}
 80003f0:	e012      	b.n	8000418 <OS_SVC_Services+0x58>
		StackFramePointer[0] = Val1 + Val2 ;
 80003f2:	7bba      	ldrb	r2, [r7, #14]
 80003f4:	7b7b      	ldrb	r3, [r7, #13]
 80003f6:	441a      	add	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	601a      	str	r2, [r3, #0]
		break ;
 80003fc:	e00c      	b.n	8000418 <OS_SVC_Services+0x58>
		StackFramePointer[0] = Val1 - Val2 ;
 80003fe:	7bba      	ldrb	r2, [r7, #14]
 8000400:	7b7b      	ldrb	r3, [r7, #13]
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	601a      	str	r2, [r3, #0]
		break ;
 8000408:	e006      	b.n	8000418 <OS_SVC_Services+0x58>
		StackFramePointer[0] = Val1 * Val2 ;
 800040a:	7bbb      	ldrb	r3, [r7, #14]
 800040c:	7b7a      	ldrb	r2, [r7, #13]
 800040e:	fb02 f203 	mul.w	r2, r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
		break ;
 8000416:	bf00      	nop
}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr

08000422 <SVC_Handler>:
__attribute ((naked)) void SVC_Handler()
{
   __asm("TST LR ,#4 \n\t"
 8000422:	f01e 0f04 	tst.w	lr, #4
 8000426:	bf0c      	ite	eq
 8000428:	f3ef 8008 	mrseq	r0, MSP
 800042c:	f3ef 8009 	mrsne	r0, PSP
 8000430:	f7ff bfc6 	b.w	80003c0 <OS_SVC_Services>
		   "ITE EQ \n\t"
		   "MRSEQ R0 ,MSP \n\t"
		   "MRSNE R0 ,PSP \n\t"
		   "B OS_SVC_Services");
}
 8000434:	bf00      	nop

08000436 <OS_SVC_Set>:

int OS_SVC_Set(int a , int b ,int SVC_ID)
{
 8000436:	b480      	push	{r7}
 8000438:	b087      	sub	sp, #28
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
	int result ;

	switch(SVC_ID)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d005      	beq.n	8000454 <OS_SVC_Set+0x1e>
 8000448:	2b03      	cmp	r3, #3
 800044a:	d005      	beq.n	8000458 <OS_SVC_Set+0x22>
 800044c:	2b01      	cmp	r3, #1
 800044e:	d105      	bne.n	800045c <OS_SVC_Set+0x26>
	{
	case 1:  //ADD

		__asm("SVC #0X01");
 8000450:	df01      	svc	1
		break ;
 8000452:	e003      	b.n	800045c <OS_SVC_Set+0x26>

	case 2:  //SUB
		__asm("SVC #0X02");
 8000454:	df02      	svc	2
		break ;
 8000456:	e001      	b.n	800045c <OS_SVC_Set+0x26>

	case 3 : //MULL
		__asm("SVC #0X03");
 8000458:	df03      	svc	3
		break ;
 800045a:	bf00      	nop
	}

    __asm("MOV %0 , R0 " : "=r" (result));
 800045c:	4603      	mov	r3, r0
 800045e:	617b      	str	r3, [r7, #20]

	return result ;
 8000460:	697b      	ldr	r3, [r7, #20]
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <main>:
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	EXTI_RQ.P_IRQ_CallBack =EXTI9_CallBack ;
	EXTI_RQ.IRQ_Enable =EXTI_IRQ_Enable ;
	MCAL_EXTI_GPIO_Init(&EXTI_RQ) ;
	mainOS();*/

   flag = 1 ;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <main+0x44>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
   flag =  OS_SVC_Set(3, 2, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	2102      	movs	r1, #2
 800047a:	2003      	movs	r0, #3
 800047c:	f7ff ffdb 	bl	8000436 <OS_SVC_Set>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <main+0x44>)
 8000486:	601a      	str	r2, [r3, #0]
   flag =  OS_SVC_Set(3, 2, 2);
 8000488:	2202      	movs	r2, #2
 800048a:	2102      	movs	r1, #2
 800048c:	2003      	movs	r0, #3
 800048e:	f7ff ffd2 	bl	8000436 <OS_SVC_Set>
 8000492:	4603      	mov	r3, r0
 8000494:	461a      	mov	r2, r3
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <main+0x44>)
 8000498:	601a      	str	r2, [r3, #0]
   flag =  OS_SVC_Set(3, 2, 3);
 800049a:	2203      	movs	r2, #3
 800049c:	2102      	movs	r1, #2
 800049e:	2003      	movs	r0, #3
 80004a0:	f7ff ffc9 	bl	8000436 <OS_SVC_Set>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b01      	ldr	r3, [pc, #4]	; (80004b0 <main+0x44>)
 80004aa:	601a      	str	r2, [r3, #0]

	while(1)
	{

		if(flag)
 80004ac:	e7fe      	b.n	80004ac <main+0x40>
 80004ae:	bf00      	nop
 80004b0:	2000001c 	.word	0x2000001c

080004b4 <Reset_Handler>:
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopForever+0x2>)
 80004b6:	4685      	mov	sp, r0
 80004b8:	f3af 8000 	nop.w
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <LoopForever+0x6>)
 80004be:	490d      	ldr	r1, [pc, #52]	; (80004f4 <LoopForever+0xa>)
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <LoopForever+0xe>)
 80004c2:	2300      	movs	r3, #0
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:
 80004c6:	58d4      	ldr	r4, [r2, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:
 80004cc:	18c4      	adds	r4, r0, r3
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopForever+0x12>)
 80004d4:	4c0a      	ldr	r4, [pc, #40]	; (8000500 <LoopForever+0x16>)
 80004d6:	2300      	movs	r3, #0
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:
 80004da:	6013      	str	r3, [r2, #0]
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:
 80004de:	42a2      	cmp	r2, r4
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>
 80004e2:	f000 f811 	bl	8000508 <__libc_init_array>
 80004e6:	f7ff ffc1 	bl	800046c <main>

080004ea <LoopForever>:
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
 80004ec:	20002800 	.word	0x20002800
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000000 	.word	0x20000000
 80004f8:	08000570 	.word	0x08000570
 80004fc:	20000000 	.word	0x20000000
 8000500:	2000005c 	.word	0x2000005c

08000504 <ADC1_2_IRQHandler>:
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <__libc_init_array>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	2500      	movs	r5, #0
 800050c:	4e0c      	ldr	r6, [pc, #48]	; (8000540 <__libc_init_array+0x38>)
 800050e:	4c0d      	ldr	r4, [pc, #52]	; (8000544 <__libc_init_array+0x3c>)
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	10a4      	asrs	r4, r4, #2
 8000514:	42a5      	cmp	r5, r4
 8000516:	d109      	bne.n	800052c <__libc_init_array+0x24>
 8000518:	f000 f81a 	bl	8000550 <_init>
 800051c:	2500      	movs	r5, #0
 800051e:	4e0a      	ldr	r6, [pc, #40]	; (8000548 <__libc_init_array+0x40>)
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <__libc_init_array+0x44>)
 8000522:	1ba4      	subs	r4, r4, r6
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	42a5      	cmp	r5, r4
 8000528:	d105      	bne.n	8000536 <__libc_init_array+0x2e>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000530:	4798      	blx	r3
 8000532:	3501      	adds	r5, #1
 8000534:	e7ee      	b.n	8000514 <__libc_init_array+0xc>
 8000536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800053a:	4798      	blx	r3
 800053c:	3501      	adds	r5, #1
 800053e:	e7f2      	b.n	8000526 <__libc_init_array+0x1e>
 8000540:	08000568 	.word	0x08000568
 8000544:	08000568 	.word	0x08000568
 8000548:	08000568 	.word	0x08000568
 800054c:	0800056c 	.word	0x0800056c

08000550 <_init>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr

0800055c <_fini>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr
