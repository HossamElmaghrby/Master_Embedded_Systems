
Atmega32_Master_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000681  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  00000831  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cd  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Master_Init>:

uint8_t SPI_Slave_Recieve(void)
{
		/* Return Data Register */
		return SPDR;
}
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	81 65       	ori	r24, 0x51	; 81
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <main>:
//==================== for master microcontroller ===============
int main(void)
{
	//set port A as output  for 7Segment 
    DDRA = 0xFF ; 
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	8a bb       	out	0x1a, r24	; 26
	
	SPI_Master_Init();
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Master_Init>
    for(int ch = 0; ch<=225 ; ch++)
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0b c0       	rjmp	.+22     	; 0x9e <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f e3       	ldi	r18, 0x3F	; 63
  8a:	3d e0       	ldi	r19, 0x0D	; 13
  8c:	43 e0       	ldi	r20, 0x03	; 3
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x14>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x1e>
  98:	00 00       	nop
	{
		_delay_ms(1000);
		PORTA = ch ;
  9a:	8b bb       	out	0x1b, r24	; 27
{
	//set port A as output  for 7Segment 
    DDRA = 0xFF ; 
	
	SPI_Master_Init();
    for(int ch = 0; ch<=225 ; ch++)
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	82 3e       	cpi	r24, 0xE2	; 226
  a0:	91 05       	cpc	r25, r1
  a2:	94 f3       	brlt	.-28     	; 0x88 <main+0xe>
	{
		_delay_ms(1000);
		PORTA = ch ;
	}
}
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
