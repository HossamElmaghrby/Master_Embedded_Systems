
Atmega32_with_MAX7221.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f5  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Master_Init>:
#define MISO 6
#define SCK 7
void SPI_Master_Init(void)
{
	//set MOSI and SCK and SS pins as output
	DDRB |=(1<<SS)|(1<<MOSI)|(1<<SCK);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	
	//enable SPI , master mode , clock rate fck/16
	SPCR |=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	81 65       	ori	r24, 0x51	; 81
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <SPI_Master_Transmit>:
}

void SPI_Master_Transmit(uint8_t cmd , uint8_t data)
{  
  PORTB &= ~(1<<SS);
  7a:	98 b3       	in	r25, 0x18	; 24
  7c:	9f 7e       	andi	r25, 0xEF	; 239
  7e:	98 bb       	out	0x18, r25	; 24
  
  SPDR = cmd ;
  80:	8f b9       	out	0x0f, r24	; 15
  
  while(!(SPSR&(1<<SPIF)));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_Master_Transmit+0x8>
  
  
  SPDR =data ;
  86:	6f b9       	out	0x0f, r22	; 15
  
  while(!(SPSR&(1<<SPIF)));
  88:	77 9b       	sbis	0x0e, 7	; 14
  8a:	fe cf       	rjmp	.-4      	; 0x88 <SPI_Master_Transmit+0xe>
  
  PORTB |=(1<<SS);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <main>:
int main(void)
{
	uint8_t count = 0 ;
	uint8_t i =0;
	
	SPI_Master_Init();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Master_Init>
	
    SPI_Master_Transmit(0x09, 0xFF);
  98:	6f ef       	ldi	r22, 0xFF	; 255
  9a:	89 e0       	ldi	r24, 0x09	; 9
  9c:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Master_Transmit>
	
	SPI_Master_Transmit(0x0A , 0x0F);
  a0:	6f e0       	ldi	r22, 0x0F	; 15
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Master_Transmit>
	
	SPI_Master_Transmit(0x0B , 0x07);
  a8:	67 e0       	ldi	r22, 0x07	; 7
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Master_Transmit>
	
	SPI_Master_Transmit(0x0C , 0x01);
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Master_Transmit>
  PORTB |=(1<<SS);
}

int main(void)
{
	uint8_t count = 0 ;
  b8:	d0 e0       	ldi	r29, 0x00	; 0
	
	SPI_Master_Transmit(0x0C , 0x01);
	
	while(1)
	{
		for(i = 1; i<9;i++)
  ba:	c1 e0       	ldi	r28, 0x01	; 1
  bc:	11 c0       	rjmp	.+34     	; 0xe0 <main+0x4c>
		{
			SPI_Master_Transmit(i,count++);
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	1d 0f       	add	r17, r29
  c2:	6d 2f       	mov	r22, r29
  c4:	8c 2f       	mov	r24, r28
  c6:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Master_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f e5       	ldi	r18, 0x5F	; 95
  cc:	8a ee       	ldi	r24, 0xEA	; 234
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x46>
  da:	00 00       	nop
	
	SPI_Master_Transmit(0x0C , 0x01);
	
	while(1)
	{
		for(i = 1; i<9;i++)
  dc:	cf 5f       	subi	r28, 0xFF	; 255
		{
			SPI_Master_Transmit(i,count++);
  de:	d1 2f       	mov	r29, r17
	
	SPI_Master_Transmit(0x0C , 0x01);
	
	while(1)
	{
		for(i = 1; i<9;i++)
  e0:	c9 30       	cpi	r28, 0x09	; 9
  e2:	68 f3       	brcs	.-38     	; 0xbe <main+0x2a>
  e4:	c1 e0       	ldi	r28, 0x01	; 1
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <main+0x5e>
			_delay_ms(300);
		}
		
		for(i= 1 ;i<9 ; i++)
		{
			SPI_Master_Transmit(i,0);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Master_Transmit>
		{
			SPI_Master_Transmit(i,count++);
			_delay_ms(300);
		}
		
		for(i= 1 ;i<9 ; i++)
  f0:	cf 5f       	subi	r28, 0xFF	; 255
  f2:	c9 30       	cpi	r28, 0x09	; 9
  f4:	c8 f3       	brcs	.-14     	; 0xe8 <main+0x54>
  f6:	e1 cf       	rjmp	.-62     	; 0xba <main+0x26>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
