
STM32F103x6_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e08  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000f38  08000f38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f58  08000f58  00010f60  2**0
                  CONTENTS
  4 .ARM          00000000  08000f58  08000f58  00010f60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f58  08000f60  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000000  08000f60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000f60  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c1c  00000000  00000000  00010f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010a8  00000000  00000000  00017ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001202  00000000  00000000  00018c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  00019e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  0001a118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000346e  00000000  00000000  0001a358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000370b  00000000  00000000  0001d7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b4a6  00000000  00000000  00020ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000920  00000000  00000000  0002c3f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f20 	.word	0x08000f20

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f20 	.word	0x08000f20

08000170 <HAL_EEPROM_Init>:
 */

#include "EEPROM/I2C_Slave_EEPROM.h"

void HAL_EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
    I2C_Config I2C_Cfg ;

    I2C_Cfg.ACK_Control = I2C_ACK_Control_Enable ;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	817b      	strh	r3, [r7, #10]
    I2C_Cfg.Clock_Frequency = I2C_Clock_Frequency_SM_100KHZ ;
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 800017e:	603b      	str	r3, [r7, #0]
    I2C_Cfg.Clock_Stretching = I2C_Clock_Stretch_Enable ;
 8000180:	2300      	movs	r3, #0
 8000182:	713b      	strb	r3, [r7, #4]
    I2C_Cfg.General_Call = I2C_General_Call_Enable ;
 8000184:	2340      	movs	r3, #64	; 0x40
 8000186:	717b      	strb	r3, [r7, #5]
    I2C_Cfg.Master_Mode = I2C_Master_Mode_SM ;
 8000188:	2300      	movs	r3, #0
 800018a:	80fb      	strh	r3, [r7, #6]
    I2C_Cfg.Mode = I2C_Mode_I2C_Mode ;
 800018c:	2300      	movs	r3, #0
 800018e:	723b      	strb	r3, [r7, #8]
    I2C_Cfg.p_slave_CallBack = NULL ;
 8000190:	2300      	movs	r3, #0
 8000192:	617b      	str	r3, [r7, #20]

    MCAL_I2C_Init(I2C1, &I2C_Cfg);
 8000194:	463b      	mov	r3, r7
 8000196:	4619      	mov	r1, r3
 8000198:	4805      	ldr	r0, [pc, #20]	; (80001b0 <HAL_EEPROM_Init+0x40>)
 800019a:	f000 fad9 	bl	8000750 <MCAL_I2C_Init>
    MCAL_I2C_GPIO_Set_Pin(I2C1);
 800019e:	4804      	ldr	r0, [pc, #16]	; (80001b0 <HAL_EEPROM_Init+0x40>)
 80001a0:	f000 fbae 	bl	8000900 <MCAL_I2C_GPIO_Set_Pin>
}
 80001a4:	bf00      	nop
 80001a6:	3718      	adds	r7, #24
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	000186a0 	.word	0x000186a0
 80001b0:	40005400 	.word	0x40005400

080001b4 <HAL_EEPROM_Write_Nbytes>:
uint8_t HAL_EEPROM_Write_Nbytes(uint16_t Memory_Address , uint8_t *Byte , uint8_t Data_Length)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b0c6      	sub	sp, #280	; 0x118
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	463b      	mov	r3, r7
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	4611      	mov	r1, r2
 80001c0:	1dbb      	adds	r3, r7, #6
 80001c2:	4602      	mov	r2, r0
 80001c4:	801a      	strh	r2, [r3, #0]
 80001c6:	1d7b      	adds	r3, r7, #5
 80001c8:	460a      	mov	r2, r1
 80001ca:	701a      	strb	r2, [r3, #0]
   int  i = 0 ;
 80001cc:	2300      	movs	r3, #0
 80001ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

   uint8_t buffer[255] ;

   buffer[0] = (uint8_t)(Memory_Address >> 8);  //upper byte Memory address
 80001d2:	1dbb      	adds	r3, r7, #6
 80001d4:	881b      	ldrh	r3, [r3, #0]
 80001d6:	0a1b      	lsrs	r3, r3, #8
 80001d8:	b29b      	uxth	r3, r3
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	701a      	strb	r2, [r3, #0]
   buffer[1] = (uint8_t)(Memory_Address);       //lower byte Memory address
 80001e2:	1dbb      	adds	r3, r7, #6
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	f107 030c 	add.w	r3, r7, #12
 80001ec:	705a      	strb	r2, [r3, #1]

   for(i= 2 ; i < (Data_Length + 2) ; i++)
 80001ee:	2302      	movs	r3, #2
 80001f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80001f4:	e012      	b.n	800021c <HAL_EEPROM_Write_Nbytes+0x68>
   {
	   buffer[i]= Byte[i-2];
 80001f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80001fa:	3b02      	subs	r3, #2
 80001fc:	463a      	mov	r2, r7
 80001fe:	6812      	ldr	r2, [r2, #0]
 8000200:	4413      	add	r3, r2
 8000202:	7819      	ldrb	r1, [r3, #0]
 8000204:	f107 020c 	add.w	r2, r7, #12
 8000208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800020c:	4413      	add	r3, r2
 800020e:	460a      	mov	r2, r1
 8000210:	701a      	strb	r2, [r3, #0]
   for(i= 2 ; i < (Data_Length + 2) ; i++)
 8000212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000216:	3301      	adds	r3, #1
 8000218:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800021c:	1d7b      	adds	r3, r7, #5
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	3302      	adds	r3, #2
 8000222:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000226:	429a      	cmp	r2, r3
 8000228:	dbe5      	blt.n	80001f6 <HAL_EEPROM_Write_Nbytes+0x42>
   }

   MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address, buffer, (Data_Length + 2), With_Stop, Start);
 800022a:	1d7b      	adds	r3, r7, #5
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	3302      	adds	r3, #2
 8000230:	b2d9      	uxtb	r1, r3
 8000232:	f107 020c 	add.w	r2, r7, #12
 8000236:	2300      	movs	r3, #0
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	460b      	mov	r3, r1
 8000240:	212a      	movs	r1, #42	; 0x2a
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <HAL_EEPROM_Write_Nbytes+0xa0>)
 8000244:	f000 fba6 	bl	8000994 <MCAL_I2C_Master_Tx>

   return 0 ;
 8000248:	2300      	movs	r3, #0


}
 800024a:	4618      	mov	r0, r3
 800024c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40005400 	.word	0x40005400

08000258 <HAL_EEPROM_Read_Nbytes>:
uint8_t HAL_EEPROM_Read_Nbytes(uint16_t Memory_Address , uint8_t *Byte , uint8_t Data_Length)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af02      	add	r7, sp, #8
 800025e:	4603      	mov	r3, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	80fb      	strh	r3, [r7, #6]
 8000264:	4613      	mov	r3, r2
 8000266:	717b      	strb	r3, [r7, #5]
   uint8_t buffer[2] ;

   buffer[0] = (uint8_t)(Memory_Address >> 8);    //upper byte Memory address
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	0a1b      	lsrs	r3, r3, #8
 800026c:	b29b      	uxth	r3, r3
 800026e:	b2db      	uxtb	r3, r3
 8000270:	733b      	strb	r3, [r7, #12]
   buffer[1] = (uint8_t)(Memory_Address);         //lower byte Memory address
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	737b      	strb	r3, [r7, #13]

   MCAL_I2C_Master_Tx(I2C1, EEPROM_Slave_Address , buffer, 2, Without_Stop, Start);
 8000278:	f107 020c 	add.w	r2, r7, #12
 800027c:	2300      	movs	r3, #0
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	2301      	movs	r3, #1
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2302      	movs	r3, #2
 8000286:	212a      	movs	r1, #42	; 0x2a
 8000288:	4809      	ldr	r0, [pc, #36]	; (80002b0 <HAL_EEPROM_Read_Nbytes+0x58>)
 800028a:	f000 fb83 	bl	8000994 <MCAL_I2C_Master_Tx>
   MCAL_I2C_Master_Rx(I2C1, EEPROM_Slave_Address, Byte, Data_Length, With_Stop, Repeated_Start);
 800028e:	797a      	ldrb	r2, [r7, #5]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	2300      	movs	r3, #0
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	4613      	mov	r3, r2
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	212a      	movs	r1, #42	; 0x2a
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <HAL_EEPROM_Read_Nbytes+0x58>)
 80002a0:	f000 fbce 	bl	8000a40 <MCAL_I2C_Master_Rx>

   return 0 ;
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40005400 	.word	0x40005400

080002b4 <SPI1_IRQHandler>:

	*(pTxBuffer) = SPIx->SPI_DR ;
}

void SPI1_IRQHandler()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr ;

	irq_scr.TXEIE  = (((SPI1->SPI_SR)>>1) & 0x1);
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <SPI1_IRQHandler+0x54>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	085b      	lsrs	r3, r3, #1
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	793b      	ldrb	r3, [r7, #4]
 80002c8:	f362 0300 	bfi	r3, r2, #0, #1
 80002cc:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNEIE = (((SPI1->SPI_SR)>>0) & 0x1);
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <SPI1_IRQHandler+0x54>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	793b      	ldrb	r3, [r7, #4]
 80002da:	f362 0341 	bfi	r3, r2, #1, #1
 80002de:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRIE  = (((SPI1->SPI_SR)>>4) & 0x1);
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <SPI1_IRQHandler+0x54>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	091b      	lsrs	r3, r3, #4
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	793b      	ldrb	r3, [r7, #4]
 80002ee:	f362 0382 	bfi	r3, r2, #2, #1
 80002f2:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_scr) ;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <SPI1_IRQHandler+0x58>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	7938      	ldrb	r0, [r7, #4]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40013000 	.word	0x40013000
 800030c:	2000001c 	.word	0x2000001c

08000310 <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr ;

	irq_scr.TXEIE  = (((SPI2->SPI_SR)>>1) & 0x1);
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <SPI2_IRQHandler+0x54>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	085b      	lsrs	r3, r3, #1
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	793b      	ldrb	r3, [r7, #4]
 8000324:	f362 0300 	bfi	r3, r2, #0, #1
 8000328:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNEIE = (((SPI2->SPI_SR)>>0) & 0x1);
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <SPI2_IRQHandler+0x54>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	793b      	ldrb	r3, [r7, #4]
 8000336:	f362 0341 	bfi	r3, r2, #1, #1
 800033a:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRIE  = (((SPI2->SPI_SR)>>4) & 0x1);
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <SPI2_IRQHandler+0x54>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	091b      	lsrs	r3, r3, #4
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	b2da      	uxtb	r2, r3
 8000348:	793b      	ldrb	r3, [r7, #4]
 800034a:	f362 0382 	bfi	r3, r2, #2, #1
 800034e:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_scr) ;
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <SPI2_IRQHandler+0x58>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	7938      	ldrb	r0, [r7, #4]
 8000358:	4798      	blx	r3
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40003800 	.word	0x40003800
 8000368:	2000001c 	.word	0x2000001c

0800036c <EXTI0_IRQHandler>:
/* ================================================ */
/* =============== ISR Functions ================== */
/* ================================================ */

void EXTI0_IRQHandler()         			/* EXTI Line0 interrupt  */
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
    EXTI->PR |=(1<<0);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI0_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI0_IRQHandler+0x1c>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
    GP_IRQ_CallBack[0]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI0_IRQHandler+0x20>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000060 	.word	0x20000060

08000390 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()         			/* EXTI Line1 interrupt  */
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 1);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI1_IRQHandler+0x1c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI1_IRQHandler+0x1c>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <EXTI1_IRQHandler+0x20>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4798      	blx	r3

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010400 	.word	0x40010400
 80003b0:	20000060 	.word	0x20000060

080003b4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()          			/* EXTI Line2 interrupt  */
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 2);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <EXTI2_IRQHandler+0x1c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <EXTI2_IRQHandler+0x1c>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <EXTI2_IRQHandler+0x20>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	4798      	blx	r3
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40010400 	.word	0x40010400
 80003d4:	20000060 	.word	0x20000060

080003d8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()          			/* EXTI Line3 interrupt  */
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 3);
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <EXTI3_IRQHandler+0x1c>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <EXTI3_IRQHandler+0x1c>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <EXTI3_IRQHandler+0x20>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	4798      	blx	r3
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010400 	.word	0x40010400
 80003f8:	20000060 	.word	0x20000060

080003fc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()                     /* EXTI Line4 interrupt  */
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI4_IRQHandler+0x1c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI4_IRQHandler+0x1c>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <EXTI4_IRQHandler+0x20>)
 800040e:	691b      	ldr	r3, [r3, #16]
 8000410:	4798      	blx	r3
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010400 	.word	0x40010400
 800041c:	20000060 	.word	0x20000060

08000420 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	2b00      	cmp	r3, #0
 800042e:	d008      	beq.n	8000442 <EXTI9_5_IRQHandler+0x22>
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <EXTI9_5_IRQHandler+0xa4>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800044a:	2b00      	cmp	r3, #0
 800044c:	d008      	beq.n	8000460 <EXTI9_5_IRQHandler+0x40>
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <EXTI9_5_IRQHandler+0xa4>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <EXTI9_5_IRQHandler+0x5e>
 800046c:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000476:	6153      	str	r3, [r2, #20]
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <EXTI9_5_IRQHandler+0xa4>)
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000486:	2b00      	cmp	r3, #0
 8000488:	d008      	beq.n	800049c <EXTI9_5_IRQHandler+0x7c>
 800048a:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 8000490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <EXTI9_5_IRQHandler+0xa4>)
 8000498:	6a1b      	ldr	r3, [r3, #32]
 800049a:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d008      	beq.n	80004ba <EXTI9_5_IRQHandler+0x9a>
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <EXTI9_5_IRQHandler+0xa0>)
 80004ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EXTI9_5_IRQHandler+0xa4>)
 80004b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b8:	4798      	blx	r3
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010400 	.word	0x40010400
 80004c4:	20000060 	.word	0x20000060

080004c8 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d008      	beq.n	80004ea <EXTI15_10_IRQHandler+0x22>
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a29      	ldr	r2, [pc, #164]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6153      	str	r3, [r2, #20]
 80004e4:	4b28      	ldr	r3, [pc, #160]	; (8000588 <EXTI15_10_IRQHandler+0xc0>)
 80004e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e8:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 80004ea:	4b26      	ldr	r3, [pc, #152]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d008      	beq.n	8000508 <EXTI15_10_IRQHandler+0x40>
 80004f6:	4b23      	ldr	r3, [pc, #140]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a22      	ldr	r2, [pc, #136]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 80004fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <EXTI15_10_IRQHandler+0xc0>)
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <EXTI15_10_IRQHandler+0x5e>
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 800051a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800051e:	6153      	str	r3, [r2, #20]
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <EXTI15_10_IRQHandler+0xc0>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d008      	beq.n	8000544 <EXTI15_10_IRQHandler+0x7c>
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a13      	ldr	r2, [pc, #76]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <EXTI15_10_IRQHandler+0xc0>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000542:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	2b00      	cmp	r3, #0
 800054e:	d008      	beq.n	8000562 <EXTI15_10_IRQHandler+0x9a>
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6153      	str	r3, [r2, #20]
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <EXTI15_10_IRQHandler+0xc0>)
 800055e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000560:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <EXTI15_10_IRQHandler+0xb8>
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI15_10_IRQHandler+0xbc>)
 8000574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI15_10_IRQHandler+0xc0>)
 800057c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057e:	4798      	blx	r3
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40010400 	.word	0x40010400
 8000588:	20000060 	.word	0x20000060

0800058c <Get_CRLH_Position>:

#include "stm32f103x6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	d042      	beq.n	8000622 <Get_CRLH_Position+0x96>
 800059c:	2b80      	cmp	r3, #128	; 0x80
 800059e:	dc11      	bgt.n	80005c4 <Get_CRLH_Position+0x38>
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d036      	beq.n	8000612 <Get_CRLH_Position+0x86>
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	dc06      	bgt.n	80005b6 <Get_CRLH_Position+0x2a>
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d02e      	beq.n	800060a <Get_CRLH_Position+0x7e>
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d02e      	beq.n	800060e <Get_CRLH_Position+0x82>
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d028      	beq.n	8000606 <Get_CRLH_Position+0x7a>
 80005b4:	e047      	b.n	8000646 <Get_CRLH_Position+0xba>
 80005b6:	2b20      	cmp	r3, #32
 80005b8:	d02f      	beq.n	800061a <Get_CRLH_Position+0x8e>
 80005ba:	2b40      	cmp	r3, #64	; 0x40
 80005bc:	d02f      	beq.n	800061e <Get_CRLH_Position+0x92>
 80005be:	2b10      	cmp	r3, #16
 80005c0:	d029      	beq.n	8000616 <Get_CRLH_Position+0x8a>
 80005c2:	e040      	b.n	8000646 <Get_CRLH_Position+0xba>
 80005c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005c8:	d033      	beq.n	8000632 <Get_CRLH_Position+0xa6>
 80005ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ce:	dc09      	bgt.n	80005e4 <Get_CRLH_Position+0x58>
 80005d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005d4:	d029      	beq.n	800062a <Get_CRLH_Position+0x9e>
 80005d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005da:	d028      	beq.n	800062e <Get_CRLH_Position+0xa2>
 80005dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005e0:	d021      	beq.n	8000626 <Get_CRLH_Position+0x9a>
 80005e2:	e030      	b.n	8000646 <Get_CRLH_Position+0xba>
 80005e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e8:	d027      	beq.n	800063a <Get_CRLH_Position+0xae>
 80005ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ee:	dc03      	bgt.n	80005f8 <Get_CRLH_Position+0x6c>
 80005f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005f4:	d01f      	beq.n	8000636 <Get_CRLH_Position+0xaa>
 80005f6:	e026      	b.n	8000646 <Get_CRLH_Position+0xba>
 80005f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005fc:	d01f      	beq.n	800063e <Get_CRLH_Position+0xb2>
 80005fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000602:	d01e      	beq.n	8000642 <Get_CRLH_Position+0xb6>
 8000604:	e01f      	b.n	8000646 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000606:	2300      	movs	r3, #0
 8000608:	e01e      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800060a:	2304      	movs	r3, #4
 800060c:	e01c      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 800060e:	2308      	movs	r3, #8
 8000610:	e01a      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000612:	230c      	movs	r3, #12
 8000614:	e018      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000616:	2310      	movs	r3, #16
 8000618:	e016      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800061a:	2314      	movs	r3, #20
 800061c:	e014      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 800061e:	2318      	movs	r3, #24
 8000620:	e012      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000622:	231c      	movs	r3, #28
 8000624:	e010      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 8000626:	2300      	movs	r3, #0
 8000628:	e00e      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800062a:	2304      	movs	r3, #4
 800062c:	e00c      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 800062e:	2308      	movs	r3, #8
 8000630:	e00a      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000632:	230c      	movs	r3, #12
 8000634:	e008      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000636:	2310      	movs	r3, #16
 8000638:	e006      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800063a:	2314      	movs	r3, #20
 800063c:	e004      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 800063e:	2318      	movs	r3, #24
 8000640:	e002      	b.n	8000648 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000642:	231c      	movs	r3, #28
 8000644:	e000      	b.n	8000648 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000652:	b590      	push	{r4, r7, lr}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	2bff      	cmp	r3, #255	; 0xff
 800066a:	d801      	bhi.n	8000670 <MCAL_GPIO_Init+0x1e>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	e001      	b.n	8000674 <MCAL_GPIO_Init+0x22>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3304      	adds	r3, #4
 8000674:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff86 	bl	800058c <Get_CRLH_Position>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	230f      	movs	r3, #15
 8000686:	4093      	lsls	r3, r2
 8000688:	43da      	mvns	r2, r3
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	401a      	ands	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d00b      	beq.n	80006b4 <MCAL_GPIO_Init+0x62>
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d007      	beq.n	80006b4 <MCAL_GPIO_Init+0x62>
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d003      	beq.n	80006b4 <MCAL_GPIO_Init+0x62>
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d10e      	bne.n	80006d2 <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	3b04      	subs	r3, #4
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	78db      	ldrb	r3, [r3, #3]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e02c      	b.n	800072c <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d003      	beq.n	80006e2 <MCAL_GPIO_Init+0x90>
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	789b      	ldrb	r3, [r3, #2]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d107      	bne.n	80006f2 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	789b      	ldrb	r3, [r3, #2]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e01c      	b.n	800072c <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	789b      	ldrb	r3, [r3, #2]
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d102      	bne.n	8000700 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 80006fa:	2304      	movs	r3, #4
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e015      	b.n	800072c <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000700:	2308      	movs	r3, #8
 8000702:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d107      	bne.n	800071c <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	8812      	ldrh	r2, [r2, #0]
 8000714:	431a      	orrs	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	e007      	b.n	800072c <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	43d2      	mvns	r2, r2
 8000726:	401a      	ands	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60da      	str	r2, [r3, #12]

		}

	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 800072c:	7bfc      	ldrb	r4, [r7, #15]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff2a 	bl	800058c <Get_CRLH_Position>
 8000738:	4603      	mov	r3, r0
 800073a:	fa04 f203 	lsl.w	r2, r4, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	431a      	orrs	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	601a      	str	r2, [r3, #0]

}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <MCAL_I2C_Init>:
 * Note 			- Supported for I2C SM mode only
 * 					- Support only 7-bit address mode
 */

void MCAL_I2C_Init(I2C_Typedef *I2Cx , I2C_Config *I2C_cfg)
{
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]

	uint32_t Pclk1 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
	uint8_t Freq_Range =0 ;
 800075e:	2300      	movs	r3, #0
 8000760:	72fb      	strb	r3, [r7, #11]
	if(I2Cx == I2C1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a5f      	ldr	r2, [pc, #380]	; (80008e4 <MCAL_I2C_Init+0x194>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d110      	bne.n	800078c <MCAL_I2C_Init+0x3c>
	{
		//PUT the configuration in Global config To use in file
		G_I2C_Config[I2C1_Index] = *I2C_cfg ;
 800076a:	4a5f      	ldr	r2, [pc, #380]	; (80008e8 <MCAL_I2C_Init+0x198>)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4614      	mov	r4, r2
 8000770:	461d      	mov	r5, r3
 8000772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000776:	e895 0003 	ldmia.w	r5, {r0, r1}
 800077a:	e884 0003 	stmia.w	r4, {r0, r1}

		//enable the clock of I2C1
		RCC_I2C1_CLK_EN() ;
 800077e:	4b5b      	ldr	r3, [pc, #364]	; (80008ec <MCAL_I2C_Init+0x19c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a5a      	ldr	r2, [pc, #360]	; (80008ec <MCAL_I2C_Init+0x19c>)
 8000784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	e014      	b.n	80007b6 <MCAL_I2C_Init+0x66>
	}
	else if (I2Cx == I2C2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a58      	ldr	r2, [pc, #352]	; (80008f0 <MCAL_I2C_Init+0x1a0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d110      	bne.n	80007b6 <MCAL_I2C_Init+0x66>
	{
		//PUT the configuration in Global config To use in file
		G_I2C_Config[I2C2_Index] = *I2C_cfg ;
 8000794:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <MCAL_I2C_Init+0x198>)
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	f103 0418 	add.w	r4, r3, #24
 800079c:	4615      	mov	r5, r2
 800079e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007a6:	e884 0003 	stmia.w	r4, {r0, r1}

		//enable the clock of I2C2
		RCC_I2C2_CLK_EN() ;
 80007aa:	4b50      	ldr	r3, [pc, #320]	; (80008ec <MCAL_I2C_Init+0x19c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a4f      	ldr	r2, [pc, #316]	; (80008ec <MCAL_I2C_Init+0x19c>)
 80007b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b4:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_cfg->Mode == I2C_Mode_I2C_Mode)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	7a1b      	ldrb	r3, [r3, #8]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d151      	bne.n	8000862 <MCAL_I2C_Init+0x112>
	{
		/* =================== Initialize Timing ==================== */

		//Get pclk1 APB1 frequency value
		Pclk1 = MCAL_RCC_GetPCLK1Freq() ;
 80007be:	f000 fadf 	bl	8000d80 <MCAL_RCC_GetPCLK1Freq>
 80007c2:	60f8      	str	r0, [r7, #12]

		//I2C_CR2 -> Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		//Divided in 1MHZ to be 1 --> 50 in binary

		Freq_Range = (uint8_t)((Pclk1/1000000)<<I2C_CR2_FREQ_Pos);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4a4b      	ldr	r2, [pc, #300]	; (80008f4 <MCAL_I2C_Init+0x1a4>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	0c9b      	lsrs	r3, r3, #18
 80007ce:	72fb      	strb	r3, [r7, #11]
		I2Cx->I2C_CR2 |= Freq_Range ;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	431a      	orrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	605a      	str	r2, [r3, #4]

		/* ========= Configure "I2C_CCR" Clock control register ========= */

		//configure the speed in standard mode
		if(I2C_cfg->Master_Mode == I2C_Master_Mode_SM )
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	88db      	ldrh	r3, [r3, #6]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10e      	bne.n	8000802 <MCAL_I2C_Init+0xb2>
			 * Tclk / 2 = CCR * Tpclk1
			 * CCR = Tclk / (2 * Tpclk1)
			 * CCR = Fpclk / (2 * I2C_ClockFrequency)
			 */

			I2Cx->I2C_CCR = (uint16_t)(Pclk1 /(I2C_cfg->Clock_Frequency << 1));
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	61da      	str	r2, [r3, #28]
			 * If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			 * therefore the TRISE[5:0] bits must be programmed with 09h.
			 * (1000 ns / 125 ns = 8 + 1)
			 */

			I2Cx->I2C_TRISE = Freq_Range +1 ;
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	3301      	adds	r3, #1
 80007fc:	461a      	mov	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	621a      	str	r2, [r3, #32]
		}

		/* ========= Configure "I2C_CR1" Control register 1 ========= */

		//set acknowledge and general call and mode and stretch
		I2Cx->I2C_CR1 |=(uint16_t)(I2C_cfg->ACK_Control | I2C_cfg->General_Call | I2C_cfg->Mode | I2C_cfg->Clock_Stretching) ;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	8951      	ldrh	r1, [r2, #10]
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	7952      	ldrb	r2, [r2, #5]
 800080e:	b292      	uxth	r2, r2
 8000810:	430a      	orrs	r2, r1
 8000812:	b292      	uxth	r2, r2
 8000814:	b211      	sxth	r1, r2
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	7a12      	ldrb	r2, [r2, #8]
 800081a:	b212      	sxth	r2, r2
 800081c:	430a      	orrs	r2, r1
 800081e:	b211      	sxth	r1, r2
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	7912      	ldrb	r2, [r2, #4]
 8000824:	b212      	sxth	r2, r2
 8000826:	430a      	orrs	r2, r1
 8000828:	b212      	sxth	r2, r2
 800082a:	b292      	uxth	r2, r2
 800082c:	431a      	orrs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]

		/* ========= Configure "I2C_OAR" Own address registers ========= */

		//set the first address of slave
		I2Cx->I2C_OAR1 |=(uint16_t)(I2C_cfg->Slave_Address.Slave_First_Address << 1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	7b52      	ldrb	r2, [r2, #13]
 800083a:	b292      	uxth	r2, r2
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	b292      	uxth	r2, r2
 8000840:	431a      	orrs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	609a      	str	r2, [r3, #8]

		if(I2C_cfg->Slave_Address.Enable_Dual_Address == 1)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	7b1b      	ldrb	r3, [r3, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d109      	bne.n	8000862 <MCAL_I2C_Init+0x112>
			/*
			 * Bits 7:1 ADD2[7:1]: Interface address
			 * 		bits 7:1 of address in dual addressing mode
			 */
			//set the second address of slave
			I2Cx->I2C_OAR2 |=(uint16_t)(I2C_cfg->Slave_Address.Slave_Second_Address << I2C_OAR2_ADD2_Pos);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	7b92      	ldrb	r2, [r2, #14]
 8000856:	b292      	uxth	r2, r2
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	b292      	uxth	r2, r2
 800085c:	431a      	orrs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60da      	str	r2, [r3, #12]
	else
	{
		//not supported SMBus mode
	}

	if(I2C_cfg->p_slave_CallBack != NULL)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d011      	beq.n	800088e <MCAL_I2C_Init+0x13e>
	{
		/* 1. Enable IRQ */
		I2Cx->I2C_CR2 |= (I2C_CR2_ITERREN); // Error interrupt enable
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITEVTEN); // Event interrupt enable
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITBUFEN); // Buffer interrupt enable
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	605a      	str	r2, [r3, #4]
	}

	/* 2. Enable IRQ in NVIC */
	if(I2Cx == I2C1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <MCAL_I2C_Init+0x194>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10c      	bne.n	80008b0 <MCAL_I2C_Init+0x160>
	{
		NVIC_IRQ31_I2C1_EV_EN();
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MCAL_I2C_Init+0x1a8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MCAL_I2C_Init+0x1a8>)
 800089c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a0:	6013      	str	r3, [r2, #0]
		NVIC_IRQ32_I2C1_ER_EN();
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MCAL_I2C_Init+0x1ac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <MCAL_I2C_Init+0x1ac>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e00f      	b.n	80008d0 <MCAL_I2C_Init+0x180>
	}
	else if (I2Cx == I2C2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <MCAL_I2C_Init+0x1a0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d10b      	bne.n	80008d0 <MCAL_I2C_Init+0x180>
	{
		NVIC_IRQ33_I2C2_EV_EN();
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MCAL_I2C_Init+0x1ac>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MCAL_I2C_Init+0x1ac>)
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ34_I2C2_ER_EN();
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MCAL_I2C_Init+0x1ac>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <MCAL_I2C_Init+0x1ac>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6013      	str	r3, [r2, #0]
	}
	//Enable the selected I2C peripheral
	I2Cx->I2C_CR1 |= I2C_CR1_PE ;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f043 0201 	orr.w	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]

}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bdb0      	pop	{r4, r5, r7, pc}
 80008e4:	40005400 	.word	0x40005400
 80008e8:	20000024 	.word	0x20000024
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40005800 	.word	0x40005800
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000e104 	.word	0xe000e104

08000900 <MCAL_I2C_GPIO_Set_Pin>:
 * @retval 			- None
 * Note 			    - Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */
void MCAL_I2C_GPIO_Set_Pin(I2C_Typedef *I2Cx)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t I2C_GPIO_Cfg ;

	if(I2Cx == I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MCAL_I2C_GPIO_Set_Pin+0x88>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d118      	bne.n	8000942 <MCAL_I2C_GPIO_Set_Pin+0x42>
	{
		//PB6 : I2C1_SCL
		I2C_GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_6 ;
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD ;
 8000914:	2307      	movs	r3, #7
 8000916:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Cfg.GPIO_Output_Speed =GPIO_SPEED_10M ;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Cfg);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	481a      	ldr	r0, [pc, #104]	; (800098c <MCAL_I2C_GPIO_Set_Pin+0x8c>)
 8000924:	f7ff fe95 	bl	8000652 <MCAL_GPIO_Init>

		//PB7 : I2C1_SDA
		I2C_GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_7 ;
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD ;
 800092c:	2307      	movs	r3, #7
 800092e:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Cfg.GPIO_Output_Speed =GPIO_SPEED_10M ;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Cfg);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <MCAL_I2C_GPIO_Set_Pin+0x8c>)
 800093c:	f7ff fe89 	bl	8000652 <MCAL_GPIO_Init>
		I2C_GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_11 ;
		I2C_GPIO_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD ;
		I2C_GPIO_Cfg.GPIO_Output_Speed =GPIO_SPEED_10M ;
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Cfg);
	}
}
 8000940:	e01d      	b.n	800097e <MCAL_I2C_GPIO_Set_Pin+0x7e>
	else if(I2Cx ==  I2C2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MCAL_I2C_GPIO_Set_Pin+0x90>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d119      	bne.n	800097e <MCAL_I2C_GPIO_Set_Pin+0x7e>
		I2C_GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_10 ;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD ;
 8000950:	2307      	movs	r3, #7
 8000952:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Cfg.GPIO_Output_Speed =GPIO_SPEED_10M ;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Cfg);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <MCAL_I2C_GPIO_Set_Pin+0x8c>)
 8000960:	f7ff fe77 	bl	8000652 <MCAL_GPIO_Init>
		I2C_GPIO_Cfg.GPIO_PinNumber = GPIO_PIN_11 ;
 8000964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000968:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD ;
 800096a:	2307      	movs	r3, #7
 800096c:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Cfg.GPIO_Output_Speed =GPIO_SPEED_10M ;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Cfg);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MCAL_I2C_GPIO_Set_Pin+0x8c>)
 800097a:	f7ff fe6a 	bl	8000652 <MCAL_GPIO_Init>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400
 800098c:	40010c00 	.word	0x40010c00
 8000990:	40005800 	.word	0x40005800

08000994 <MCAL_I2C_Master_Tx>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_Tx(I2C_Typedef *I2Cx , uint8_t Dev_Address ,uint8_t *Data_Out , uint8_t Data_Length ,Stop_Condition Stop , Start_Condition Start )
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	461a      	mov	r2, r3
 80009a0:	460b      	mov	r3, r1
 80009a2:	72fb      	strb	r3, [r7, #11]
 80009a4:	4613      	mov	r3, r2
 80009a6:	72bb      	strb	r3, [r7, #10]


	uint8_t i ;

	// Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master
	I2C_Generate_Start(I2Cx, Enable, Start);
 80009a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009ac:	461a      	mov	r2, r3
 80009ae:	2101      	movs	r1, #1
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f000 f8b9 	bl	8000b28 <I2C_Generate_Start>

	/* Wait for EV5 */
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!(I2C_Get_FlagStatus(I2Cx, EV5)));
 80009b6:	bf00      	nop
 80009b8:	2101      	movs	r1, #1
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f000 f8dc 	bl	8000b78 <I2C_Get_FlagStatus>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f8      	beq.n	80009b8 <MCAL_I2C_Master_Tx+0x24>

	//Writing DR register with Address, Send Address
	I2C_Send_Address(I2Cx, Dev_Address, Transmitter);
 80009c6:	7afb      	ldrb	r3, [r7, #11]
 80009c8:	2200      	movs	r2, #0
 80009ca:	4619      	mov	r1, r3
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 f94b 	bl	8000c68 <I2C_Send_Address>

	/* Wait for EV6 */
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.

	while(!(I2C_Get_FlagStatus(I2Cx, EV6)));
 80009d2:	bf00      	nop
 80009d4:	2102      	movs	r1, #2
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f000 f8ce 	bl	8000b78 <I2C_Get_FlagStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f8      	beq.n	80009d4 <MCAL_I2C_Master_Tx+0x40>

	/*Wait for EV8_1 */
	/* EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR. */
	/* Check for TRA: Transmitter/receiver, BUSY: Bus busy, MSL: Master/slave, TxE Flags */
	while(!(I2C_Get_FlagStatus(I2Cx, Master_Transmitter_Event)));
 80009e2:	bf00      	nop
 80009e4:	4915      	ldr	r1, [pc, #84]	; (8000a3c <MCAL_I2C_Master_Tx+0xa8>)
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f000 f8c6 	bl	8000b78 <I2C_Get_FlagStatus>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f8      	beq.n	80009e4 <MCAL_I2C_Master_Tx+0x50>


	//Check if there is Data length available
	for(i = 0 ; i < Data_Length ; ++i )
 80009f2:	2300      	movs	r3, #0
 80009f4:	75fb      	strb	r3, [r7, #23]
 80009f6:	e011      	b.n	8000a1c <MCAL_I2C_Master_Tx+0x88>
	{
		//Write in the DR register the data to be sent
		I2Cx->I2C_DR = Data_Out[i];
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	611a      	str	r2, [r3, #16]

		/* 7. Wait for EV8 */
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register.
		while(!(I2C_Get_FlagStatus(I2Cx, EV8)));
 8000a06:	bf00      	nop
 8000a08:	2106      	movs	r1, #6
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f000 f8b4 	bl	8000b78 <I2C_Get_FlagStatus>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f8      	beq.n	8000a08 <MCAL_I2C_Master_Tx+0x74>
	for(i = 0 ; i < Data_Length ; ++i )
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	7dfa      	ldrb	r2, [r7, #23]
 8000a1e:	7abb      	ldrb	r3, [r7, #10]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3e9      	bcc.n	80009f8 <MCAL_I2C_Master_Tx+0x64>

	}

	//Send Stop Condition
	if(Stop == With_Stop)
 8000a24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d103      	bne.n	8000a34 <MCAL_I2C_Master_Tx+0xa0>
		I2C_Generate_Stop(I2Cx, Enable);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f000 f937 	bl	8000ca2 <I2C_Generate_Stop>

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	00070080 	.word	0x00070080

08000a40 <MCAL_I2C_Master_Rx>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_Rx(I2C_Typedef *I2Cx , uint8_t Dev_Address ,uint8_t *Data_in , uint8_t Data_Length ,Stop_Condition Stop , Start_Condition Start )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	72fb      	strb	r3, [r7, #11]
 8000a50:	4613      	mov	r3, r2
 8000a52:	72bb      	strb	r3, [r7, #10]
	 * TODO so any code exist in while (check flag || any polling conditions)
	 */


	uint8_t i ;
	uint8_t index = (I2Cx ==  I2C1)? I2C1_Index : I2C2_Index ;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <MCAL_I2C_Master_Rx+0xe0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	75bb      	strb	r3, [r7, #22]
	// Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master
	I2C_Generate_Start(I2Cx, Enable, Start);
 8000a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f000 f85b 	bl	8000b28 <I2C_Generate_Start>

	/* Wait for EV5 */
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!(I2C_Get_FlagStatus(I2Cx, EV5)));
 8000a72:	bf00      	nop
 8000a74:	2101      	movs	r1, #1
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f87e 	bl	8000b78 <I2C_Get_FlagStatus>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f8      	beq.n	8000a74 <MCAL_I2C_Master_Rx+0x34>

	//Writing DR register with Address, Send Address
	I2C_Send_Address(I2Cx, Dev_Address, Receiver);
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f000 f8ed 	bl	8000c68 <I2C_Send_Address>

	/* Wait for EV6 */
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.

	while(!(I2C_Get_FlagStatus(I2Cx, EV6)));
 8000a8e:	bf00      	nop
 8000a90:	2102      	movs	r1, #2
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f870 	bl	8000b78 <I2C_Get_FlagStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f8      	beq.n	8000a90 <MCAL_I2C_Master_Rx+0x50>

	I2C_ACKConfig(I2Cx, Enable);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f919 	bl	8000cd8 <I2C_ACKConfig>

	if(Data_Length)
 8000aa6:	7abb      	ldrb	r3, [r7, #10]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d01c      	beq.n	8000ae6 <MCAL_I2C_Master_Rx+0xa6>
	{
		for(i = Data_Length ; i>1 ; i--)
 8000aac:	7abb      	ldrb	r3, [r7, #10]
 8000aae:	75fb      	strb	r3, [r7, #23]
 8000ab0:	e012      	b.n	8000ad8 <MCAL_I2C_Master_Rx+0x98>
		{
			//Wait for EV7
			//EV7: RxNE=1 cleared by reading DR register

			while(!(I2C_Get_FlagStatus(I2Cx, EV7)));
 8000ab2:	bf00      	nop
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f000 f85e 	bl	8000b78 <I2C_Get_FlagStatus>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f8      	beq.n	8000ab4 <MCAL_I2C_Master_Rx+0x74>

			//Read the data in the DR register
			*Data_in = I2Cx->I2C_DR ;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	701a      	strb	r2, [r3, #0]

			//go to next address
			Data_in++ ;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
		for(i = Data_Length ; i>1 ; i--)
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	75fb      	strb	r3, [r7, #23]
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d8e9      	bhi.n	8000ab2 <MCAL_I2C_Master_Rx+0x72>
		}

		//		To generate the non-acknowledge pulse after the last received data byte, the ACK bit
		//		must be cleared just after reading the second last data byte (after second last RxNE event).

		I2C_ACKConfig(I2Cx, Disable);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 f8f9 	bl	8000cd8 <I2C_ACKConfig>
	}


	if(Stop == With_Stop)
 8000ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <MCAL_I2C_Master_Rx+0xb6>
		I2C_Generate_Stop(I2Cx, Enable); //send stop condition
 8000aee:	2101      	movs	r1, #1
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 f8d6 	bl	8000ca2 <I2C_Generate_Stop>

	//re- enable ACK
	if(G_I2C_Config[index].ACK_Control == I2C_ACK_Control_Enable)
 8000af6:	7dba      	ldrb	r2, [r7, #22]
 8000af8:	490a      	ldr	r1, [pc, #40]	; (8000b24 <MCAL_I2C_Master_Rx+0xe4>)
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	440b      	add	r3, r1
 8000b04:	330a      	adds	r3, #10
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b0c:	d103      	bne.n	8000b16 <MCAL_I2C_Master_Rx+0xd6>
		I2C_ACKConfig(I2Cx, Enable);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f000 f8e1 	bl	8000cd8 <I2C_ACKConfig>

}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40005400 	.word	0x40005400
 8000b24:	20000024 	.word	0x20000024

08000b28 <I2C_Generate_Start>:
/* ================================================================ */
/* ======================== Generic APIs ========================== */
/* ================================================================ */

void I2C_Generate_Start(I2C_Typedef *I2Cx ,Functional_State NewState , Start_Condition Start)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
 8000b34:	4613      	mov	r3, r2
 8000b36:	70bb      	strb	r3, [r7, #2]
	//Check the type of start (Start or Repeated Start)
	if(Start != Repeated_Start)
 8000b38:	78bb      	ldrb	r3, [r7, #2]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d007      	beq.n	8000b4e <I2C_Generate_Start+0x26>
	{
		// Check if the bus is idle
		while(I2C_Get_FlagStatus(I2Cx, Bus_Busy));
 8000b3e:	bf00      	nop
 8000b40:	2100      	movs	r1, #0
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f818 	bl	8000b78 <I2C_Get_FlagStatus>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f8      	bne.n	8000b40 <I2C_Generate_Start+0x18>
	//       1: Repeated start generation
	//       In Slave mode:
	//       0: No Start generation
	//       1: Start generation when the bus is free

	if(NewState != Disable)
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <I2C_Generate_Start+0x3a>
	{
		//Generate a START condition
		I2Cx->I2C_CR1 |= I2C_CR1_START ;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
	{
		//Disable the START condition generation
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000b60:	e005      	b.n	8000b6e <I2C_Generate_Start+0x46>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START) ;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <I2C_Get_FlagStatus>:

I2C_FlagStatus I2C_Get_FlagStatus(I2C_Typedef *I2Cx ,Status Flag )
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]

	uint32_t Flag_1 = 0, Flag_2 = 0, Last_Event;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
	I2C_FlagStatus Bit_status =Reset ;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	75fb      	strb	r3, [r7, #23]

	switch(Flag)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d806      	bhi.n	8000ba2 <I2C_Get_FlagStatus+0x2a>
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d22e      	bcs.n	8000bf6 <I2C_Get_FlagStatus+0x7e>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d014      	beq.n	8000bc6 <I2C_Get_FlagStatus+0x4e>
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d81e      	bhi.n	8000bde <I2C_Get_FlagStatus+0x66>
 8000ba0:	e005      	b.n	8000bae <I2C_Get_FlagStatus+0x36>
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d933      	bls.n	8000c0e <I2C_Get_FlagStatus+0x96>
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <I2C_Get_FlagStatus+0xec>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d03c      	beq.n	8000c26 <I2C_Get_FlagStatus+0xae>
 8000bac:	e054      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0)
		if((I2Cx->I2C_SR2) & (I2C_SR2_BUSY))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <I2C_Get_FlagStatus+0x48>
			Bit_status = Set ;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
		else
			Bit_status = Reset ;

		break ;
 8000bbe:	e04b      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
			Bit_status = Reset ;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
		break ;
 8000bc4:	e048      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
		//					0: No Start condition
		//					1: Start condition generated.
		//			   – Set when a Start condition generated.
		//			   – Cleared by software by reading the SR1 register followed by writing the DR register, or by hardware when PE=0

		if((I2Cx->I2C_SR1) & (I2C_SR1_SB))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <I2C_Get_FlagStatus+0x60>
			Bit_status = Set ;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	75fb      	strb	r3, [r7, #23]
		else
			Bit_status = Reset ;

		break ;
 8000bd6:	e03f      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
			Bit_status = Reset ;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	75fb      	strb	r3, [r7, #23]
		break ;
 8000bdc:	e03c      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
		//					– For 10-bit addressing, the bit is set after the ACK of the 2nd byte.
		//					– For 7-bit addressing, the bit is set after the ACK of the byte.
		//
		//					Note: ADDR is not set after a NACK reception

		if(I2Cx->I2C_SR1 & I2C_SR1_ADDR )
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <I2C_Get_FlagStatus+0x78>
			Bit_status = Set ;
 8000bea:	2301      	movs	r3, #1
 8000bec:	75fb      	strb	r3, [r7, #23]
		else
			Bit_status = Reset ;

		break ;
 8000bee:	e033      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
			Bit_status = Reset ;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	75fb      	strb	r3, [r7, #23]
		break ;
 8000bf4:	e030      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
		//						– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//						– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//						RxNE is not set in case of ARLO event.
		//						Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full.

		if((I2Cx->I2C_SR1) & (I2C_SR1_RXNE))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <I2C_Get_FlagStatus+0x90>
			Bit_status = Set;
 8000c02:	2301      	movs	r3, #1
 8000c04:	75fb      	strb	r3, [r7, #23]
		else
			Bit_status = Reset;
		break;
 8000c06:	e027      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
			Bit_status = Reset;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	75fb      	strb	r3, [r7, #23]
		break;
 8000c0c:	e024      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
		//						0: Data register not empty
		//						1: Data register empty
		//						– Set when DR is empty in transmission. TxE is not set during address phase.
		//						– Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0.

		if((I2Cx->I2C_SR1) & (I2C_SR1_TXE))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <I2C_Get_FlagStatus+0xa8>
			Bit_status = Set;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
		else
			Bit_status = Reset;
		break;
 8000c1e:	e01b      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
			Bit_status = Reset;
 8000c20:	2300      	movs	r3, #0
 8000c22:	75fb      	strb	r3, [r7, #23]
		break;
 8000c24:	e018      	b.n	8000c58 <I2C_Get_FlagStatus+0xe0>
	case Master_Transmitter_Event :
	{
		/* Check if BUSY ,TRA ,MSL W,TXE flags are all set */

		/*Read the I2C status register */
		Flag_1 = Master_Transmitter_Event & (0x0000FFFF);
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	613b      	str	r3, [r7, #16]
		Flag_2 = Master_Transmitter_Event >> 16;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60fb      	str	r3, [r7, #12]

		/* Get the last event value form the I2C status registers */
		Last_Event = ((I2Cx->I2C_SR1 & Flag_1) | ((I2Cx->I2C_SR2 & Flag_2) << 16) );
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	401a      	ands	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6999      	ldr	r1, [r3, #24]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	041b      	lsls	r3, r3, #16
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]

		if(Last_Event == Flag)
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d102      	bne.n	8000c52 <I2C_Get_FlagStatus+0xda>
			Bit_status = Set;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	75fb      	strb	r3, [r7, #23]
		else
			Bit_status = Reset;
		break;
 8000c50:	e001      	b.n	8000c56 <I2C_Get_FlagStatus+0xde>
			Bit_status = Reset;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]
		break;
 8000c56:	bf00      	nop
	}

	}
	return Bit_status ;
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	00070080 	.word	0x00070080

08000c68 <I2C_Send_Address>:

void I2C_Send_Address(I2C_Typedef *I2Cx , uint8_t Dev_Address , I2C_Direction Direction)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
 8000c74:	4613      	mov	r3, r2
 8000c76:	70bb      	strb	r3, [r7, #2]
	//Support 7-bit address mode only
	if(Direction == Receiver)
 8000c78:	78bb      	ldrb	r3, [r7, #2]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d107      	bne.n	8000c8e <I2C_Send_Address+0x26>
	{
		//Set the address bit 0 for read
		I2Cx->I2C_DR = (Dev_Address << 1 | (0x01) );
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	611a      	str	r2, [r3, #16]
	else
	{
		//Reset the address bit 0 for write
		I2Cx->I2C_DR = (Dev_Address << 1 );
	}
}
 8000c8c:	e004      	b.n	8000c98 <I2C_Send_Address+0x30>
		I2Cx->I2C_DR = (Dev_Address << 1 );
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	611a      	str	r2, [r3, #16]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <I2C_Generate_Stop>:

void I2C_Generate_Stop(I2C_Typedef *I2Cx ,Functional_State NewState)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
	//	0: No Stop generation.
	//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
	//	In Slave mode:
	//	0: No Stop generation.
	//	1: Release the SCL and SDA lines after the current byte transfer
	if(NewState == Enable)
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d106      	bne.n	8000cc2 <I2C_Generate_Stop+0x20>
	{
		// Generate a stop condition, Enable stop bit
		I2Cx->I2C_CR1 |= (I2C_CR1_STOP);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable the stop condition generation, Disable stop bit
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000cc0:	e005      	b.n	8000cce <I2C_Generate_Stop+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <I2C_ACKConfig>:

void I2C_ACKConfig(I2C_Typedef *I2Cx, Functional_State State)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
	if(State == Enable)
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d106      	bne.n	8000cf8 <I2C_ACKConfig+0x20>
	{
		/* Enable Automatic ACK */
		I2Cx->I2C_CR1 |= (I2C_CR1_ACK);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable Automatic ACK */
		I2Cx->I2C_CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000cf6:	e005      	b.n	8000d04 <I2C_ACKConfig+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_ACK);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
	...

08000d10 <MCAL_RCC_GetSYSCLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

const uint8_t AHPPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};
uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: not applicable
	uint32_t CLK ;
	switch((RCC->CFGR>>2)& 0b11)
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d007      	beq.n	8000d34 <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d302      	bcc.n	8000d2e <MCAL_RCC_GetSYSCLKFreq+0x1e>
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d006      	beq.n	8000d3a <MCAL_RCC_GetSYSCLKFreq+0x2a>
 8000d2c:	e008      	b.n	8000d40 <MCAL_RCC_GetSYSCLKFreq+0x30>
	{
	case 0:
		CLK= HSI_RC_CLK ;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MCAL_RCC_GetSYSCLKFreq+0x40>)
 8000d30:	607b      	str	r3, [r7, #4]
		break;
 8000d32:	e005      	b.n	8000d40 <MCAL_RCC_GetSYSCLKFreq+0x30>
	case 1:
		// TODO need to calculate it // HSE user should specify it
		CLK= HSE_CLK;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MCAL_RCC_GetSYSCLKFreq+0x44>)
 8000d36:	607b      	str	r3, [r7, #4]
		break;
 8000d38:	e002      	b.n	8000d40 <MCAL_RCC_GetSYSCLKFreq+0x30>
	case 2:
		// TODO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
		CLK= 16000000;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MCAL_RCC_GetSYSCLKFreq+0x44>)
 8000d3c:	607b      	str	r3, [r7, #4]
		break;
 8000d3e:	bf00      	nop
	}
	return CLK ;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	007a1200 	.word	0x007a1200
 8000d54:	00f42400 	.word	0x00f42400

08000d58 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
     return (MCAL_RCC_GetSYSCLKFreq()>>AHPPrescTable[(RCC->CFGR >> 4) &0xF]);
 8000d5c:	f7ff ffd8 	bl	8000d10 <MCAL_RCC_GetSYSCLKFreq>
 8000d60:	4601      	mov	r1, r0
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <MCAL_RCC_GetHCLKFreq+0x24>)
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	08000f48 	.word	0x08000f48

08000d80 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq()>>APBPrescTable[(RCC->CFGR >>8)&0b111 ]);
 8000d84:	f7ff ffe8 	bl	8000d58 <MCAL_RCC_GetHCLKFreq>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000
 8000da4:	08000f40 	.word	0x08000f40

08000da8 <USART1_IRQHandler>:
    	}
    }
}

void USART1_IRQHandler (void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	Global_USART_config[0]->P_IRQ_CallBack();
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <USART1_IRQHandler+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	4798      	blx	r3
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000054 	.word	0x20000054

08000dbc <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	Global_USART_config[1]->P_IRQ_CallBack();
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <USART2_IRQHandler+0x10>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	4798      	blx	r3
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000054 	.word	0x20000054

08000dd0 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	Global_USART_config[2]->P_IRQ_CallBack();
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <USART3_IRQHandler+0x10>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	4798      	blx	r3
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000054 	.word	0x20000054

08000de4 <clock_init>:
#include "EEPROM/I2C_Slave_EEPROM.h"

//=============macros==================

void clock_init()
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN() ;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <clock_init+0x30>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <clock_init+0x30>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <clock_init+0x30>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <clock_init+0x30>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <clock_init+0x30>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <clock_init+0x30>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6193      	str	r3, [r2, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000

08000e18 <main>:

int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
	clock_init();
 8000e1e:	f7ff ffe1 	bl	8000de4 <clock_init>

	//Initialization of clock

	HAL_EEPROM_Init();
 8000e22:	f7ff f9a5 	bl	8000170 <HAL_EEPROM_Init>

	/* =============== Test Case 1 =============== */
	uint8_t ch1[] = {0x01 , 0x02 , 0x03 , 0x04 , 0x05 ,0x07};
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <main+0x68>)
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e30:	6018      	str	r0, [r3, #0]
 8000e32:	3304      	adds	r3, #4
 8000e34:	8019      	strh	r1, [r3, #0]
	uint8_t ch2[7] ;

	HAL_EEPROM_Write_Nbytes(0xAF, ch1, 7);
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	20af      	movs	r0, #175	; 0xaf
 8000e40:	f7ff f9b8 	bl	80001b4 <HAL_EEPROM_Write_Nbytes>
	HAL_EEPROM_Read_Nbytes(0xAF, ch2, 7);
 8000e44:	463b      	mov	r3, r7
 8000e46:	2207      	movs	r2, #7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	20af      	movs	r0, #175	; 0xaf
 8000e4c:	f7ff fa04 	bl	8000258 <HAL_EEPROM_Read_Nbytes>

	/* =============== Test Case 2 =============== */

	ch1[0] = 0xA;
 8000e50:	230a      	movs	r3, #10
 8000e52:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000e54:	230b      	movs	r3, #11
 8000e56:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000e5c:	230d      	movs	r3, #13
 8000e5e:	72fb      	strb	r3, [r7, #11]

	HAL_EEPROM_Write_Nbytes(0xFFF, ch1, 4);
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2204      	movs	r2, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e6c:	f7ff f9a2 	bl	80001b4 <HAL_EEPROM_Write_Nbytes>
	HAL_EEPROM_Read_Nbytes(0xFFF, ch2, 4);
 8000e70:	463b      	mov	r3, r7
 8000e72:	2204      	movs	r2, #4
 8000e74:	4619      	mov	r1, r3
 8000e76:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e7a:	f7ff f9ed 	bl	8000258 <HAL_EEPROM_Read_Nbytes>

	while(1)
 8000e7e:	e7fe      	b.n	8000e7e <main+0x66>
 8000e80:	08000f38 	.word	0x08000f38

08000e84 <Reset_Handler>:
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x2>)
 8000e86:	4685      	mov	sp, r0
 8000e88:	f3af 8000 	nop.w
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopForever+0x6>)
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopForever+0xa>)
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopForever+0xe>)
 8000e92:	2300      	movs	r3, #0
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:
 8000e96:	58d4      	ldr	r4, [r2, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:
 8000e9c:	18c4      	adds	r4, r0, r3
 8000e9e:	428c      	cmp	r4, r1
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopForever+0x12>)
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopForever+0x16>)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:
 8000eae:	42a2      	cmp	r2, r4
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>
 8000eb2:	f000 f811 	bl	8000ed8 <__libc_init_array>
 8000eb6:	f7ff ffaf 	bl	8000e18 <main>

08000eba <LoopForever>:
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
 8000ebc:	20002800 	.word	0x20002800
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	08000f60 	.word	0x08000f60
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	2000009c 	.word	0x2000009c

08000ed4 <ADC1_2_IRQHandler>:
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <__libc_init_array>:
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	2500      	movs	r5, #0
 8000edc:	4e0c      	ldr	r6, [pc, #48]	; (8000f10 <__libc_init_array+0x38>)
 8000ede:	4c0d      	ldr	r4, [pc, #52]	; (8000f14 <__libc_init_array+0x3c>)
 8000ee0:	1ba4      	subs	r4, r4, r6
 8000ee2:	10a4      	asrs	r4, r4, #2
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	d109      	bne.n	8000efc <__libc_init_array+0x24>
 8000ee8:	f000 f81a 	bl	8000f20 <_init>
 8000eec:	2500      	movs	r5, #0
 8000eee:	4e0a      	ldr	r6, [pc, #40]	; (8000f18 <__libc_init_array+0x40>)
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <__libc_init_array+0x44>)
 8000ef2:	1ba4      	subs	r4, r4, r6
 8000ef4:	10a4      	asrs	r4, r4, #2
 8000ef6:	42a5      	cmp	r5, r4
 8000ef8:	d105      	bne.n	8000f06 <__libc_init_array+0x2e>
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f00:	4798      	blx	r3
 8000f02:	3501      	adds	r5, #1
 8000f04:	e7ee      	b.n	8000ee4 <__libc_init_array+0xc>
 8000f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f0a:	4798      	blx	r3
 8000f0c:	3501      	adds	r5, #1
 8000f0e:	e7f2      	b.n	8000ef6 <__libc_init_array+0x1e>
 8000f10:	08000f58 	.word	0x08000f58
 8000f14:	08000f58 	.word	0x08000f58
 8000f18:	08000f58 	.word	0x08000f58
 8000f1c:	08000f5c 	.word	0x08000f5c

08000f20 <_init>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	bf00      	nop
 8000f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f26:	bc08      	pop	{r3}
 8000f28:	469e      	mov	lr, r3
 8000f2a:	4770      	bx	lr

08000f2c <_fini>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	bf00      	nop
 8000f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f32:	bc08      	pop	{r3}
 8000f34:	469e      	mov	lr, r3
 8000f36:	4770      	bx	lr
