
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000790  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  0000082c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee7  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be9  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9b  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000044a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092b  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d92  00000000  00000000  00005243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 01 	call	0x372	; 0x372 <main>
  8a:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Kick>:
	    	
}
void LCD_Kick()
{
	//LCD_Cont_PORT &=~(1<<EN);
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT , EN ,GPIO_PIN_RESET);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	68 e0       	ldi	r22, 0x08	; 8
  96:	86 e3       	ldi	r24, 0x36	; 54
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	83 e2       	ldi	r24, 0x23	; 35
  a0:	94 ef       	ldi	r25, 0xF4	; 244
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Kick+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Kick+0x16>
  a8:	00 00       	nop
	_delay_ms(250);
	//LCD_Cont_PORT |=(1<<EN);
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT , EN ,GPIO_PIN_SET);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	86 e3       	ldi	r24, 0x36	; 54
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
  b6:	08 95       	ret

000000b8 <LCD_busy>:
		}
	}
}

void LCD_busy()
{
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
	//LCD_DataDir_PORT =0x0;
		pincfg.GPIO_PinNumber = GPIO_PIN_4;
  c4:	cc e6       	ldi	r28, 0x6C	; 108
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	10 e1       	ldi	r17, 0x10	; 16
  ca:	18 83       	st	Y, r17
		pincfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
  cc:	19 82       	std	Y+1, r1	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT, &pincfg);
  ce:	be 01       	movw	r22, r28
  d0:	89 e3       	ldi	r24, 0x39	; 57
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>

		pincfg.GPIO_PinNumber = GPIO_PIN_5;
  d8:	68 94       	set
  da:	ee 24       	eor	r14, r14
  dc:	e5 f8       	bld	r14, 5
  de:	e8 82       	st	Y, r14
		pincfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
  e0:	19 82       	std	Y+1, r1	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT, &pincfg);
  e2:	be 01       	movw	r22, r28
  e4:	89 e3       	ldi	r24, 0x39	; 57
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>

		pincfg.GPIO_PinNumber = GPIO_PIN_6;
  ec:	68 94       	set
  ee:	ff 24       	eor	r15, r15
  f0:	f6 f8       	bld	r15, 6
  f2:	f8 82       	st	Y, r15
		pincfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
  f4:	19 82       	std	Y+1, r1	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT, &pincfg);
  f6:	be 01       	movw	r22, r28
  f8:	89 e3       	ldi	r24, 0x39	; 57
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>

		pincfg.GPIO_PinNumber = GPIO_PIN_7;
 100:	00 e8       	ldi	r16, 0x80	; 128
 102:	08 83       	st	Y, r16
		pincfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 104:	19 82       	std	Y+1, r1	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT, &pincfg);
 106:	be 01       	movw	r22, r28
 108:	89 e3       	ldi	r24, 0x39	; 57
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
		
		//LCD_Cont_PORT |=(1<<RW); //Read
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RW,GPIO_PIN_SET) ;
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	64 e0       	ldi	r22, 0x04	; 4
 114:	86 e3       	ldi	r24, 0x36	; 54
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
		//LCD_Cont_PORT &=~(1<<RS); // command
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RS,GPIO_PIN_RESET) ;
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	86 e3       	ldi	r24, 0x36	; 54
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
		
   		LCD_Kick();
 128:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
		   
		//LCD_DataDir_PORT =0xF ;
		pincfg.GPIO_PinNumber = GPIO_PIN_4 ;
 12c:	18 83       	st	Y, r17
		pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP ;
 12e:	12 e0       	ldi	r17, 0x02	; 2
 130:	19 83       	std	Y+1, r17	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT , &pincfg);
 132:	be 01       	movw	r22, r28
 134:	89 e3       	ldi	r24, 0x39	; 57
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
		pincfg.GPIO_PinNumber = GPIO_PIN_5;
 13c:	e8 82       	st	Y, r14
		pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP ;
 13e:	19 83       	std	Y+1, r17	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT , &pincfg);
 140:	be 01       	movw	r22, r28
 142:	89 e3       	ldi	r24, 0x39	; 57
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
		pincfg.GPIO_PinNumber = GPIO_PIN_6;
 14a:	f8 82       	st	Y, r15
		pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP ;
 14c:	19 83       	std	Y+1, r17	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT , &pincfg);
 14e:	be 01       	movw	r22, r28
 150:	89 e3       	ldi	r24, 0x39	; 57
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>

		pincfg.GPIO_PinNumber = GPIO_PIN_7;
 158:	08 83       	st	Y, r16
		pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP ;
 15a:	19 83       	std	Y+1, r17	; 0x01
		MCAL_GPIO_Init(LCD_DATA_PORT , &pincfg);		
 15c:	be 01       	movw	r22, r28
 15e:	89 e3       	ldi	r24, 0x39	; 57
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
		//LCD_Cont_PORT &=~(1<<RW);
	    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	86 e3       	ldi	r24, 0x36	; 54
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	    	
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	ff 90       	pop	r15
 17c:	ef 90       	pop	r14
 17e:	08 95       	ret

00000180 <LCD_Command>:
	LCD_Command(LCD_DISP_ON_CURSOR);
	LCD_Command(LCD_DISP_ON);
}

void LCD_Command(unsigned char command)
{
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
	   #ifdef EIGHT_BIT_MODE
	   
	   LCD_busy();
 184:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_busy>
	  // LCD_DATA_PORT =command ;       // Data lines are set to send data
	  MCAL_GPIO_WritePort(LCD_DATA_PORT , command);
 188:	6c 2f       	mov	r22, r28
 18a:	89 e3       	ldi	r24, 0x39	; 57
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <MCAL_GPIO_WritePort>
	  
	  //LCD_Cont_PORT &=~(1<<RS);      // RS set 0 to command
	  MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RS ,GPIO_PIN_RESET);
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	86 e3       	ldi	r24, 0x36	; 54
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	  
	  //LCD_Cont_PORT &=~(1<<RW);      // RW set 0 to write
	   MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RW ,GPIO_PIN_RESET);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	   
       LCD_Kick();
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RW ,GPIO_PIN_RESET);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RS ,GPIO_PIN_RESET);
		LCD_Kick();
      #endif
	  
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_write>:

void LCD_write(unsigned char data)
{
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
	 #ifdef EIGHT_BIT_MODE
	    LCD_busy();
 1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_busy>
	  	//LCD_DATA_PORT =data ;
		 MCAL_GPIO_WritePort(LCD_DATA_PORT , data) ;
 1ba:	6c 2f       	mov	r22, r28
 1bc:	89 e3       	ldi	r24, 0x39	; 57
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <MCAL_GPIO_WritePort>
	    //LCD_Cont_PORT |=(1<<RS);
	     MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RS,GPIO_PIN_SET) ; 
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	86 e3       	ldi	r24, 0x36	; 54
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	  	//LCD_Cont_PORT &= ~(1<<RW);
	  	 MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RW,GPIO_PIN_RESET) ; 
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	86 e3       	ldi	r24, 0x36	; 54
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	  	LCD_Kick();
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
			//LCD_Cont_PORT &= ~(1<<RW);
			MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RW,GPIO_PIN_RESET) ;
	 	    LCD_Kick();
			 
     #endif
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <LCD_clear_screen>:
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT , EN ,GPIO_PIN_SET);
}

void LCD_clear_screen()
{
	LCD_Command(LCD_CLEAR_SCREEN);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
 1ea:	08 95       	ret

000001ec <LCD_init>:
#define EIGHT_BIT_MODE
//#define FOUR_BIT_MODE

GPIO_PinConfig_t pincfg ;
void LCD_init(void)
{
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	87 e8       	ldi	r24, 0x87	; 135
 1f4:	93 e1       	ldi	r25, 0x13	; 19
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_init+0xa>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_init+0x10>
 1fc:	00 00       	nop
	_delay_ms(20);
	//configuration RS pin
	pincfg.GPIO_PinNumber = RS ;
 1fe:	cc e6       	ldi	r28, 0x6C	; 108
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	12 e0       	ldi	r17, 0x02	; 2
 204:	18 83       	st	Y, r17
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 206:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init( LCD_CONTROL_PORT , &pincfg);
 208:	be 01       	movw	r22, r28
 20a:	86 e3       	ldi	r24, 0x36	; 54
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
	//configuration RW pin
	pincfg.GPIO_PinNumber = RW ;
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	88 83       	st	Y, r24
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 216:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init( LCD_CONTROL_PORT , &pincfg);
 218:	be 01       	movw	r22, r28
 21a:	86 e3       	ldi	r24, 0x36	; 54
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
		
	//configuration EN pin
	pincfg.GPIO_PinNumber = EN ;
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	88 83       	st	Y, r24
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 226:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init( LCD_CONTROL_PORT , &pincfg);
 228:	be 01       	movw	r22, r28
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
	//LCD_DataDir_PORT =0xf ;
	//configuration LCD_DATA_PORT pins
	pincfg.GPIO_PinNumber =GPIO_PIN_4 ;
 232:	80 e1       	ldi	r24, 0x10	; 16
 234:	88 83       	st	Y, r24
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 236:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init(LCD_DATA_PORT ,&pincfg);
 238:	be 01       	movw	r22, r28
 23a:	89 e3       	ldi	r24, 0x39	; 57
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
	pincfg.GPIO_PinNumber =GPIO_PIN_5 ;
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	88 83       	st	Y, r24
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 246:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init(LCD_DATA_PORT ,&pincfg);
 248:	be 01       	movw	r22, r28
 24a:	89 e3       	ldi	r24, 0x39	; 57
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
	pincfg.GPIO_PinNumber =GPIO_PIN_6 ;
 252:	80 e4       	ldi	r24, 0x40	; 64
 254:	88 83       	st	Y, r24
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 256:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init(LCD_DATA_PORT ,&pincfg);	
 258:	be 01       	movw	r22, r28
 25a:	89 e3       	ldi	r24, 0x39	; 57
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>

	pincfg.GPIO_PinNumber =GPIO_PIN_7 ;
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	88 83       	st	Y, r24
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 266:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init(LCD_DATA_PORT ,&pincfg);	
 268:	be 01       	movw	r22, r28
 26a:	89 e3       	ldi	r24, 0x39	; 57
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
	
	//LCD_ContDir_PORT |=((1<<RS) | (1<<RW) |(1<<EN));
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT , EN ,GPIO_PIN_RESET);
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	68 e0       	ldi	r22, 0x08	; 8
 276:	86 e3       	ldi	r24, 0x36	; 54
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RS ,GPIO_PIN_RESET);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	86 e3       	ldi	r24, 0x36	; 54
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT , RW ,GPIO_PIN_RESET);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	64 e0       	ldi	r22, 0x04	; 4
 28e:	86 e3       	ldi	r24, 0x36	; 54
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_GPIO_WritePin>
 296:	85 ea       	ldi	r24, 0xA5	; 165
 298:	9e e0       	ldi	r25, 0x0E	; 14
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_init+0xae>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_init+0xb4>
 2a0:	00 00       	nop
	
	_delay_ms(15);
	
	LCD_clear_screen();
 2a2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_clear_screen>
	
	#ifdef EIGHT_BIT_MODE
	LCD_Command(LCD_FUNCTION_8BIT_2LINES); 
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Command(0x02);
	LCD_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_Command(LCD_ENTRY_MODE);
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
	LCD_Command(LCD_BEGIN_AT_FIRST_ROW);
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
	LCD_Command(LCD_DISP_ON_CURSOR);
 2b8:	8e e0       	ldi	r24, 0x0E	; 14
 2ba:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
	LCD_Command(LCD_DISP_ON);
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	08 95       	ret

000002cc <Cursor_pos>:
}

void Cursor_pos(unsigned char X_pos , unsigned char Y_pos)
{
	unsigned char address =0;
	if(X_pos == 0)
 2cc:	88 23       	and	r24, r24
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <Cursor_pos+0xc>
	address =LCD_BEGIN_AT_FIRST_ROW ;
	else if(X_pos == 1)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	21 f0       	breq	.+8      	; 0x2dc <Cursor_pos+0x10>
	LCD_Command(LCD_CLEAR_SCREEN);
}

void Cursor_pos(unsigned char X_pos , unsigned char Y_pos)
{
	unsigned char address =0;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <Cursor_pos+0x12>
	if(X_pos == 0)
	address =LCD_BEGIN_AT_FIRST_ROW ;
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	01 c0       	rjmp	.+2      	; 0x2de <Cursor_pos+0x12>
	else if(X_pos == 1)
	address = LCD_BEGIN_AT_SECOND_ROW;
 2dc:	80 ec       	ldi	r24, 0xC0	; 192
	
	if(Y_pos>=0 && Y_pos<16)
 2de:	60 31       	cpi	r22, 0x10	; 16
 2e0:	08 f4       	brcc	.+2      	; 0x2e4 <Cursor_pos+0x18>
	address+=Y_pos;
 2e2:	86 0f       	add	r24, r22
	
	LCD_Command(address);
 2e4:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Command>
 2e8:	08 95       	ret

000002ea <LCD_write_string>:
			 
     #endif
}

void LCD_write_string(char *string)
{
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	8c 01       	movw	r16, r24
	int count =0;
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string >0)
 2f8:	19 c0       	rjmp	.+50     	; 0x32c <LCD_write_string+0x42>
	{
		count++ ;
 2fa:	21 96       	adiw	r28, 0x01	; 1
		LCD_write(*string++);
 2fc:	0f 5f       	subi	r16, 0xFF	; 255
 2fe:	1f 4f       	sbci	r17, 0xFF	; 255
 300:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write>
		if(count == 16)
 304:	c0 31       	cpi	r28, 0x10	; 16
 306:	d1 05       	cpc	r29, r1
 308:	29 f4       	brne	.+10     	; 0x314 <LCD_write_string+0x2a>
		{
			Cursor_pos(1,0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 66 01 	call	0x2cc	; 0x2cc <Cursor_pos>
 312:	0c c0       	rjmp	.+24     	; 0x32c <LCD_write_string+0x42>
		}
		else if(count ==32 || count ==33)
 314:	ce 01       	movw	r24, r28
 316:	80 97       	sbiw	r24, 0x20	; 32
 318:	02 97       	sbiw	r24, 0x02	; 2
 31a:	40 f4       	brcc	.+16     	; 0x32c <LCD_write_string+0x42>
		{
				LCD_clear_screen();
 31c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_clear_screen>
				Cursor_pos(0,0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 66 01 	call	0x2cc	; 0x2cc <Cursor_pos>
				count =0;
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_write_string(char *string)
{
	int count =0;
	while(*string >0)
 32c:	f8 01       	movw	r30, r16
 32e:	80 81       	ld	r24, Z
 330:	81 11       	cpse	r24, r1
 332:	e3 cf       	rjmp	.-58     	; 0x2fa <LCD_write_string+0x10>
				LCD_clear_screen();
				Cursor_pos(0,0);
				count =0;
		}
	}
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <LCD_display_number>:
	
	LCD_Command(address);
}

void LCD_display_number(int number)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	00 d0       	rcall	.+0      	; 0x344 <LCD_display_number+0x6>
 344:	00 d0       	rcall	.+0      	; 0x346 <LCD_display_number+0x8>
 346:	1f 92       	push	r1
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	char str[5];
	
	itoa(number , str ,10);
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	be 01       	movw	r22, r28
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	0e 94 86 03 	call	0x70c	; 0x70c <itoa>
	LCD_write_string(str);
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_write_string>
}
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <main>:
#include "Atmega32_SPI_Driver.h"

//#define Master_Mode
#define  Slave_Mode
int main(void)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	2b 97       	sbiw	r28, 0x0b	; 11
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
	 uint8 count = 0 ;
	 
	 uint8 data  ,RXdata;
	LCD_init() ;
 386:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_init>
	
	SPI_Config SPI_cfg ;
	
	SPI_cfg.Baud_Rate = SPI_Baud_Rate_Double_Speed_8 ;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	8d 83       	std	Y+5, r24	; 0x05
	SPI_cfg.CLK_Phase = SPI_CLK_Phase_second_edge ;
 38e:	94 e0       	ldi	r25, 0x04	; 4
 390:	98 87       	std	Y+8, r25	; 0x08
	SPI_cfg.CLK_Polarity =SPI_CLK_Polarity_HIGH_idle ;
 392:	98 e0       	ldi	r25, 0x08	; 8
 394:	9f 83       	std	Y+7, r25	; 0x07
	SPI_cfg.CLK_Speed = SPI_CLK_Speed_Double ;
 396:	8e 83       	std	Y+6, r24	; 0x06
	SPI_cfg.Data_Order = SPI_Data_Order_MSB_First ;
 398:	1c 82       	std	Y+4, r1	; 0x04
	  SPI_cfg.IRQ_Enable = SPI_IR_Enable_NONE ;
	  SPI_cfg.P_IRQ_CallBack = NULL ;
#endif	

#ifdef 	Slave_Mode
      SPI_cfg.Device_Mode = SPI_Mode_slave ;
 39a:	1b 82       	std	Y+3, r1	; 0x03
      SPI_cfg.IRQ_Enable = SPI_IR_Enable_NONE ;
 39c:	19 86       	std	Y+9, r1	; 0x09
      SPI_cfg.P_IRQ_CallBack = NULL ;
 39e:	1b 86       	std	Y+11, r1	; 0x0b
 3a0:	1a 86       	std	Y+10, r1	; 0x0a
#endif
    MCAL_SPI_Init(SPI1 , &SPI_cfg);
 3a2:	be 01       	movw	r22, r28
 3a4:	6d 5f       	subi	r22, 0xFD	; 253
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8d e2       	ldi	r24, 0x2D	; 45
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 66 02 	call	0x4cc	; 0x4cc <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 3b0:	8d e2       	ldi	r24, 0x2D	; 45
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 a5 02 	call	0x54a	; 0x54a <MCAL_SPI_GPIO_Set_Pins>
    LCD_write_string("Master");
	data ='A';
#endif

#ifdef Slave_Mode
    LCD_write_string("Slave");
 3b8:	82 e6       	ldi	r24, 0x62	; 98
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_write_string>
	RXdata ='a';
 3c0:	81 e6       	ldi	r24, 0x61	; 97
 3c2:	8a 83       	std	Y+2, r24	; 0x02

//#define Master_Mode
#define  Slave_Mode
int main(void)
{
	 uint8 count = 0 ;
 3c4:	10 e0       	ldi	r17, 0x00	; 0
	   _delay_ms(1000);
	   data++;
	  #endif
	  
	  #ifdef Slave_Mode
	  if(RXdata == 'z'+1)
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	8b 37       	cpi	r24, 0x7B	; 123
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <main+0x5e>
	  RXdata ='a';
 3cc:	81 e6       	ldi	r24, 0x61	; 97
 3ce:	8a 83       	std	Y+2, r24	; 0x02
	  MCAL_SPI_Send_Data(SPI1 , &RXdata, SPI_enable);
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	be 01       	movw	r22, r28
 3d4:	6e 5f       	subi	r22, 0xFE	; 254
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8d e2       	ldi	r24, 0x2D	; 45
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 0a 03 	call	0x614	; 0x614 <MCAL_SPI_Send_Data>
	  MCAL_SPI_Recieve_Data(SPI1 , &data , SPI_enable);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	be 01       	movw	r22, r28
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	8d e2       	ldi	r24, 0x2D	; 45
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_SPI_Recieve_Data>
	  Cursor_pos(1,0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 66 01 	call	0x2cc	; 0x2cc <Cursor_pos>
	  LCD_write(data);
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write>
 3fe:	8f e4       	ldi	r24, 0x4F	; 79
 400:	93 ec       	ldi	r25, 0xC3	; 195
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	  _delay_ms(200);
	  RXdata++;
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	8a 83       	std	Y+2, r24	; 0x02
	  #endif	
	    
	  Cursor_pos(0,10);
 410:	6a e0       	ldi	r22, 0x0A	; 10
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 66 01 	call	0x2cc	; 0x2cc <Cursor_pos>
	  if(count == 10)
 418:	1a 30       	cpi	r17, 0x0A	; 10
 41a:	09 f4       	brne	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
       count = 0;
 41c:	10 e0       	ldi	r17, 0x00	; 0
	   
	   LCD_display_number(count);
 41e:	81 2f       	mov	r24, r17
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_display_number>
	   count++ ;
 426:	1f 5f       	subi	r17, 0xFF	; 255
  }
 428:	ce cf       	rjmp	.-100    	; 0x3c6 <main+0x54>

0000042a <MCAL_GPIO_Init>:
 */
void MCAL_GPIO_DeInit(GPIO_TypeDef_t* GPIOx)
{
	GPIOx->DDR =0x00 ;
	GPIOx->PIN =0x00 ;
	GPIOx->PORT=0x00 ;
 42a:	dc 01       	movw	r26, r24
 42c:	fb 01       	movw	r30, r22
 42e:	81 81       	ldd	r24, Z+1	; 0x01
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	11 f0       	breq	.+4      	; 0x438 <MCAL_GPIO_Init+0xe>
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	e1 f4       	brne	.+56     	; 0x470 <MCAL_GPIO_Init+0x46>
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	9c 91       	ld	r25, X
 43c:	11 97       	sbiw	r26, 0x01	; 1
 43e:	80 81       	ld	r24, Z
 440:	89 2b       	or	r24, r25
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	8c 93       	st	X, r24
 446:	11 97       	sbiw	r26, 0x01	; 1
 448:	81 81       	ldd	r24, Z+1	; 0x01
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	49 f4       	brne	.+18     	; 0x460 <MCAL_GPIO_Init+0x36>
 44e:	12 96       	adiw	r26, 0x02	; 2
 450:	9c 91       	ld	r25, X
 452:	12 97       	sbiw	r26, 0x02	; 2
 454:	80 81       	ld	r24, Z
 456:	80 95       	com	r24
 458:	89 23       	and	r24, r25
 45a:	12 96       	adiw	r26, 0x02	; 2
 45c:	8c 93       	st	X, r24
 45e:	08 95       	ret
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	9c 91       	ld	r25, X
 464:	12 97       	sbiw	r26, 0x02	; 2
 466:	80 81       	ld	r24, Z
 468:	89 2b       	or	r24, r25
 46a:	12 96       	adiw	r26, 0x02	; 2
 46c:	8c 93       	st	X, r24
 46e:	08 95       	ret
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	e0 f4       	brcc	.+56     	; 0x4ac <MCAL_GPIO_Init+0x82>
 474:	11 96       	adiw	r26, 0x01	; 1
 476:	9c 91       	ld	r25, X
 478:	11 97       	sbiw	r26, 0x01	; 1
 47a:	80 81       	ld	r24, Z
 47c:	80 95       	com	r24
 47e:	89 23       	and	r24, r25
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	8c 93       	st	X, r24
 484:	11 97       	sbiw	r26, 0x01	; 1
 486:	81 81       	ldd	r24, Z+1	; 0x01
 488:	81 11       	cpse	r24, r1
 48a:	09 c0       	rjmp	.+18     	; 0x49e <MCAL_GPIO_Init+0x74>
 48c:	12 96       	adiw	r26, 0x02	; 2
 48e:	9c 91       	ld	r25, X
 490:	12 97       	sbiw	r26, 0x02	; 2
 492:	80 81       	ld	r24, Z
 494:	80 95       	com	r24
 496:	89 23       	and	r24, r25
 498:	12 96       	adiw	r26, 0x02	; 2
 49a:	8c 93       	st	X, r24
 49c:	08 95       	ret
 49e:	12 96       	adiw	r26, 0x02	; 2
 4a0:	9c 91       	ld	r25, X
 4a2:	12 97       	sbiw	r26, 0x02	; 2
 4a4:	80 81       	ld	r24, Z
 4a6:	89 2b       	or	r24, r25
 4a8:	12 96       	adiw	r26, 0x02	; 2
 4aa:	8c 93       	st	X, r24
 4ac:	08 95       	ret

000004ae <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef_t * GPIOx , uint8_t PinNumber ,uint8_t Value)
{
 4ae:	fc 01       	movw	r30, r24
    if(Value == GPIO_PIN_SET)	
 4b0:	41 30       	cpi	r20, 0x01	; 1
 4b2:	21 f4       	brne	.+8      	; 0x4bc <MCAL_GPIO_WritePin+0xe>
	{
		GPIOx->PORT |= (uint8_t)PinNumber ;
 4b4:	82 81       	ldd	r24, Z+2	; 0x02
 4b6:	68 2b       	or	r22, r24
 4b8:	62 83       	std	Z+2, r22	; 0x02
 4ba:	08 95       	ret
	}
	else
	{
		GPIOx->PORT &=~((uint8_t)PinNumber);
 4bc:	92 81       	ldd	r25, Z+2	; 0x02
 4be:	60 95       	com	r22
 4c0:	69 23       	and	r22, r25
 4c2:	62 83       	std	Z+2, r22	; 0x02
 4c4:	08 95       	ret

000004c6 <MCAL_GPIO_WritePort>:
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef_t * GPIOx ,uint8_t Value)
{
	GPIOx->PORT = (uint8_t)Value ;
 4c6:	fc 01       	movw	r30, r24
 4c8:	62 83       	std	Z+2, r22	; 0x02
 4ca:	08 95       	ret

000004cc <MCAL_SPI_Init>:
		
		
		if(Polling_En == SPI_enable)
		while(!(SPIx->_SPSR & (1<<7)));
		
		*pTxBuffer = SPIx->_SPDR ;		
 4cc:	fc 01       	movw	r30, r24
 4ce:	db 01       	movw	r26, r22
 4d0:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
 4d4:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
 4d8:	13 96       	adiw	r26, 0x03	; 3
 4da:	8c 91       	ld	r24, X
 4dc:	13 97       	sbiw	r26, 0x03	; 3
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	51 f4       	brne	.+20     	; 0x4f6 <MCAL_SPI_Init+0x2a>
 4e2:	12 96       	adiw	r26, 0x02	; 2
 4e4:	8c 91       	ld	r24, X
 4e6:	12 97       	sbiw	r26, 0x02	; 2
 4e8:	90 81       	ld	r25, Z
 4ea:	89 2b       	or	r24, r25
 4ec:	80 83       	st	Z, r24
 4ee:	81 81       	ldd	r24, Z+1	; 0x01
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	81 83       	std	Z+1, r24	; 0x01
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <MCAL_SPI_Init+0x36>
 4f6:	12 96       	adiw	r26, 0x02	; 2
 4f8:	8c 91       	ld	r24, X
 4fa:	12 97       	sbiw	r26, 0x02	; 2
 4fc:	90 81       	ld	r25, Z
 4fe:	89 2b       	or	r24, r25
 500:	80 83       	st	Z, r24
 502:	15 96       	adiw	r26, 0x05	; 5
 504:	9c 91       	ld	r25, X
 506:	15 97       	sbiw	r26, 0x05	; 5
 508:	80 81       	ld	r24, Z
 50a:	89 2b       	or	r24, r25
 50c:	80 83       	st	Z, r24
 50e:	14 96       	adiw	r26, 0x04	; 4
 510:	9c 91       	ld	r25, X
 512:	14 97       	sbiw	r26, 0x04	; 4
 514:	89 2b       	or	r24, r25
 516:	80 83       	st	Z, r24
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	9c 91       	ld	r25, X
 51c:	11 97       	sbiw	r26, 0x01	; 1
 51e:	89 2b       	or	r24, r25
 520:	80 83       	st	Z, r24
 522:	9c 91       	ld	r25, X
 524:	89 2b       	or	r24, r25
 526:	80 83       	st	Z, r24
 528:	16 96       	adiw	r26, 0x06	; 6
 52a:	8c 91       	ld	r24, X
 52c:	16 97       	sbiw	r26, 0x06	; 6
 52e:	88 23       	and	r24, r24
 530:	41 f0       	breq	.+16     	; 0x542 <MCAL_SPI_Init+0x76>
 532:	8f b7       	in	r24, 0x3f	; 63
 534:	80 68       	ori	r24, 0x80	; 128
 536:	8f bf       	out	0x3f, r24	; 63
 538:	16 96       	adiw	r26, 0x06	; 6
 53a:	8c 91       	ld	r24, X
 53c:	90 81       	ld	r25, Z
 53e:	89 2b       	or	r24, r25
 540:	80 83       	st	Z, r24
 542:	80 81       	ld	r24, Z
 544:	80 64       	ori	r24, 0x40	; 64
 546:	80 83       	st	Z, r24
 548:	08 95       	ret

0000054a <MCAL_SPI_GPIO_Set_Pins>:
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	00 d0       	rcall	.+0      	; 0x552 <MCAL_SPI_GPIO_Set_Pins+0x8>
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 55a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 55e:	80 81       	ld	r24, Z
 560:	80 31       	cpi	r24, 0x10	; 16
 562:	49 f5       	brne	.+82     	; 0x5b6 <MCAL_SPI_GPIO_Set_Pins+0x6c>
 564:	89 83       	std	Y+1, r24	; 0x01
 566:	12 e0       	ldi	r17, 0x02	; 2
 568:	1a 83       	std	Y+2, r17	; 0x02
 56a:	be 01       	movw	r22, r28
 56c:	6f 5f       	subi	r22, 0xFF	; 255
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	86 e3       	ldi	r24, 0x36	; 54
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 578:	80 e2       	ldi	r24, 0x20	; 32
 57a:	89 83       	std	Y+1, r24	; 0x01
 57c:	1a 83       	std	Y+2, r17	; 0x02
 57e:	be 01       	movw	r22, r28
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	86 e3       	ldi	r24, 0x36	; 54
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 58c:	80 e4       	ldi	r24, 0x40	; 64
 58e:	89 83       	std	Y+1, r24	; 0x01
 590:	1a 82       	std	Y+2, r1	; 0x02
 592:	be 01       	movw	r22, r28
 594:	6f 5f       	subi	r22, 0xFF	; 255
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	86 e3       	ldi	r24, 0x36	; 54
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	1a 83       	std	Y+2, r17	; 0x02
 5a6:	be 01       	movw	r22, r28
 5a8:	6f 5f       	subi	r22, 0xFF	; 255
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	86 e3       	ldi	r24, 0x36	; 54
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 5b4:	29 c0       	rjmp	.+82     	; 0x608 <MCAL_SPI_GPIO_Set_Pins+0xbe>
 5b6:	80 e1       	ldi	r24, 0x10	; 16
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	1a 82       	std	Y+2, r1	; 0x02
 5bc:	be 01       	movw	r22, r28
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	86 e3       	ldi	r24, 0x36	; 54
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 5ca:	80 e2       	ldi	r24, 0x20	; 32
 5cc:	89 83       	std	Y+1, r24	; 0x01
 5ce:	1a 82       	std	Y+2, r1	; 0x02
 5d0:	be 01       	movw	r22, r28
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	86 e3       	ldi	r24, 0x36	; 54
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 5de:	80 e4       	ldi	r24, 0x40	; 64
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	8a 83       	std	Y+2, r24	; 0x02
 5e6:	be 01       	movw	r22, r28
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	86 e3       	ldi	r24, 0x36	; 54
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 5f4:	80 e8       	ldi	r24, 0x80	; 128
 5f6:	89 83       	std	Y+1, r24	; 0x01
 5f8:	1a 82       	std	Y+2, r1	; 0x02
 5fa:	be 01       	movw	r22, r28
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	86 e3       	ldi	r24, 0x36	; 54
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 15 02 	call	0x42a	; 0x42a <MCAL_GPIO_Init>
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	08 95       	ret

00000614 <MCAL_SPI_Send_Data>:
 614:	fc 01       	movw	r30, r24
 616:	db 01       	movw	r26, r22
 618:	8c 91       	ld	r24, X
 61a:	82 83       	std	Z+2, r24	; 0x02
 61c:	41 30       	cpi	r20, 0x01	; 1
 61e:	19 f4       	brne	.+6      	; 0x626 <MCAL_SPI_Send_Data+0x12>
 620:	91 81       	ldd	r25, Z+1	; 0x01
 622:	99 23       	and	r25, r25
 624:	ec f7       	brge	.-6      	; 0x620 <MCAL_SPI_Send_Data+0xc>
 626:	08 95       	ret

00000628 <MCAL_SPI_Recieve_Data>:
 628:	fc 01       	movw	r30, r24
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	19 f4       	brne	.+6      	; 0x634 <MCAL_SPI_Recieve_Data+0xc>
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	99 23       	and	r25, r25
 632:	ec f7       	brge	.-6      	; 0x62e <MCAL_SPI_Recieve_Data+0x6>
 634:	82 81       	ldd	r24, Z+2	; 0x02
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fb 01       	movw	r30, r22
 63a:	91 83       	std	Z+1, r25	; 0x01
 63c:	80 83       	st	Z, r24
 63e:	08 95       	ret

00000640 <__vector_12>:
			
}

//================IRQ Function Definitions===============
ISR(SPI_STC_vect)
{
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 662:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 666:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 66a:	07 80       	ldd	r0, Z+7	; 0x07
 66c:	f0 85       	ldd	r31, Z+8	; 0x08
 66e:	e0 2d       	mov	r30, r0
 670:	09 95       	icall
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <MCAL_UART_SendNoBlock>:
	 {
		 
		 UART_Interrupt_Enable_TXCIE;
		 TX_str =str ;
		 MCAL_UART_SendNoBlock(str[0]);
		 flag_send = 0;
 694:	8c b9       	out	0x0c, r24	; 12
 696:	08 95       	ret

00000698 <__vector_15>:
	 }
}

ISR(USART_TXC_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
	static uint8 i= 1;
	if(TX_str[i] != 0)
 6ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6be:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TX_str>
 6c2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TX_str+0x1>
 6c6:	e8 0f       	add	r30, r24
 6c8:	f1 1d       	adc	r31, r1
 6ca:	80 81       	ld	r24, Z
 6cc:	88 23       	and	r24, r24
 6ce:	41 f0       	breq	.+16     	; 0x6e0 <__vector_15+0x48>
	{
		MCAL_UART_SendNoBlock(TX_str[i]);
 6d0:	0e 94 4a 03 	call	0x694	; 0x694 <MCAL_UART_SendNoBlock>
		i++;
 6d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
 6da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <__vector_15+0x52>
	}
	else
	{
		i=1;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		flag_send= 1;
 6e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_send>
	}
}
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

0000070c <itoa>:
 70c:	45 32       	cpi	r20, 0x25	; 37
 70e:	51 05       	cpc	r21, r1
 710:	20 f4       	brcc	.+8      	; 0x71a <itoa+0xe>
 712:	42 30       	cpi	r20, 0x02	; 2
 714:	10 f0       	brcs	.+4      	; 0x71a <itoa+0xe>
 716:	0c 94 91 03 	jmp	0x722	; 0x722 <__itoa_ncheck>
 71a:	fb 01       	movw	r30, r22
 71c:	10 82       	st	Z, r1
 71e:	cb 01       	movw	r24, r22
 720:	08 95       	ret

00000722 <__itoa_ncheck>:
 722:	bb 27       	eor	r27, r27
 724:	4a 30       	cpi	r20, 0x0A	; 10
 726:	31 f4       	brne	.+12     	; 0x734 <__itoa_ncheck+0x12>
 728:	99 23       	and	r25, r25
 72a:	22 f4       	brpl	.+8      	; 0x734 <__itoa_ncheck+0x12>
 72c:	bd e2       	ldi	r27, 0x2D	; 45
 72e:	90 95       	com	r25
 730:	81 95       	neg	r24
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__utoa_common>

00000738 <__utoa_ncheck>:
 738:	bb 27       	eor	r27, r27

0000073a <__utoa_common>:
 73a:	fb 01       	movw	r30, r22
 73c:	55 27       	eor	r21, r21
 73e:	aa 27       	eor	r26, r26
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	aa 1f       	adc	r26, r26
 746:	a4 17       	cp	r26, r20
 748:	10 f0       	brcs	.+4      	; 0x74e <__utoa_common+0x14>
 74a:	a4 1b       	sub	r26, r20
 74c:	83 95       	inc	r24
 74e:	50 51       	subi	r21, 0x10	; 16
 750:	b9 f7       	brne	.-18     	; 0x740 <__utoa_common+0x6>
 752:	a0 5d       	subi	r26, 0xD0	; 208
 754:	aa 33       	cpi	r26, 0x3A	; 58
 756:	08 f0       	brcs	.+2      	; 0x75a <__utoa_common+0x20>
 758:	a9 5d       	subi	r26, 0xD9	; 217
 75a:	a1 93       	st	Z+, r26
 75c:	00 97       	sbiw	r24, 0x00	; 0
 75e:	79 f7       	brne	.-34     	; 0x73e <__utoa_common+0x4>
 760:	b1 11       	cpse	r27, r1
 762:	b1 93       	st	Z+, r27
 764:	11 92       	st	Z+, r1
 766:	cb 01       	movw	r24, r22
 768:	0c 94 b6 03 	jmp	0x76c	; 0x76c <strrev>

0000076c <strrev>:
 76c:	dc 01       	movw	r26, r24
 76e:	fc 01       	movw	r30, r24
 770:	67 2f       	mov	r22, r23
 772:	71 91       	ld	r23, Z+
 774:	77 23       	and	r23, r23
 776:	e1 f7       	brne	.-8      	; 0x770 <strrev+0x4>
 778:	32 97       	sbiw	r30, 0x02	; 2
 77a:	04 c0       	rjmp	.+8      	; 0x784 <strrev+0x18>
 77c:	7c 91       	ld	r23, X
 77e:	6d 93       	st	X+, r22
 780:	70 83       	st	Z, r23
 782:	62 91       	ld	r22, -Z
 784:	ae 17       	cp	r26, r30
 786:	bf 07       	cpc	r27, r31
 788:	c8 f3       	brcs	.-14     	; 0x77c <strrev+0x10>
 78a:	08 95       	ret

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
