
STM32F103x6_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000fa4  08000fa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fbc  08000fbc  00010fc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000fbc  08000fbc  00010fc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fbc  08000fc4  00010fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc0  08000fc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000fc4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000fc4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050e6  00000000  00000000  00010fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ce9  00000000  00000000  000160d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d90  00000000  00000000  00016dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e3e  00000000  00000000  00017f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002886  00000000  00000000  00018d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009973  00000000  00000000  0001b60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024f7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000704  00000000  00000000  00024ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f8c 	.word	0x08000f8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f8c 	.word	0x08000f8c

08000170 <MCAL_SPI_Init>:
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a53      	ldr	r2, [pc, #332]	; (80002cc <MCAL_SPI_Init+0x15c>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d10f      	bne.n	80001a2 <MCAL_SPI_Init+0x32>
 8000182:	4a53      	ldr	r2, [pc, #332]	; (80002d0 <MCAL_SPI_Init+0x160>)
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	6013      	str	r3, [r2, #0]
 8000188:	4b52      	ldr	r3, [pc, #328]	; (80002d4 <MCAL_SPI_Init+0x164>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a51      	ldr	r2, [pc, #324]	; (80002d4 <MCAL_SPI_Init+0x164>)
 800018e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b50      	ldr	r3, [pc, #320]	; (80002d8 <MCAL_SPI_Init+0x168>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a4f      	ldr	r2, [pc, #316]	; (80002d8 <MCAL_SPI_Init+0x168>)
 800019a:	f043 0308 	orr.w	r3, r3, #8
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	e012      	b.n	80001c8 <MCAL_SPI_Init+0x58>
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4a4d      	ldr	r2, [pc, #308]	; (80002dc <MCAL_SPI_Init+0x16c>)
 80001a6:	4293      	cmp	r3, r2
 80001a8:	d10e      	bne.n	80001c8 <MCAL_SPI_Init+0x58>
 80001aa:	4a49      	ldr	r2, [pc, #292]	; (80002d0 <MCAL_SPI_Init+0x160>)
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	6053      	str	r3, [r2, #4]
 80001b0:	4b48      	ldr	r3, [pc, #288]	; (80002d4 <MCAL_SPI_Init+0x164>)
 80001b2:	69db      	ldr	r3, [r3, #28]
 80001b4:	4a47      	ldr	r2, [pc, #284]	; (80002d4 <MCAL_SPI_Init+0x164>)
 80001b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001ba:	61d3      	str	r3, [r2, #28]
 80001bc:	4b46      	ldr	r3, [pc, #280]	; (80002d8 <MCAL_SPI_Init+0x168>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a45      	ldr	r2, [pc, #276]	; (80002d8 <MCAL_SPI_Init+0x168>)
 80001c2:	f043 0310 	orr.w	r3, r3, #16
 80001c6:	6013      	str	r3, [r2, #0]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	683a      	ldr	r2, [r7, #0]
 80001ce:	8812      	ldrh	r2, [r2, #0]
 80001d0:	431a      	orrs	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	8852      	ldrh	r2, [r2, #2]
 80001de:	431a      	orrs	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	8892      	ldrh	r2, [r2, #4]
 80001ec:	431a      	orrs	r2, r3
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	88d2      	ldrh	r2, [r2, #6]
 80001fa:	431a      	orrs	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	8912      	ldrh	r2, [r2, #8]
 8000208:	431a      	orrs	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	8952      	ldrh	r2, [r2, #10]
 8000216:	431a      	orrs	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	8992      	ldrh	r2, [r2, #12]
 8000224:	431a      	orrs	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	89db      	ldrh	r3, [r3, #14]
 800022e:	2b00      	cmp	r3, #0
 8000230:	bf0c      	ite	eq
 8000232:	2301      	moveq	r3, #1
 8000234:	2300      	movne	r3, #0
 8000236:	b2da      	uxtb	r2, r3
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	89db      	ldrh	r3, [r3, #14]
 800023c:	2b04      	cmp	r3, #4
 800023e:	bf0c      	ite	eq
 8000240:	2301      	moveq	r3, #1
 8000242:	2300      	movne	r3, #0
 8000244:	b2db      	uxtb	r3, r3
 8000246:	4313      	orrs	r3, r2
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	89db      	ldrh	r3, [r3, #14]
 8000250:	2b00      	cmp	r3, #0
 8000252:	bf0c      	ite	eq
 8000254:	2301      	moveq	r3, #1
 8000256:	2300      	movne	r3, #0
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4313      	orrs	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d007      	beq.n	8000270 <MCAL_SPI_Init+0x100>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	89d2      	ldrh	r2, [r2, #14]
 8000268:	431a      	orrs	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	e01a      	b.n	80002a6 <MCAL_SPI_Init+0x136>
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	89db      	ldrh	r3, [r3, #14]
 8000274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000278:	bf0c      	ite	eq
 800027a:	2301      	moveq	r3, #1
 800027c:	2300      	movne	r3, #0
 800027e:	b2da      	uxtb	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	89db      	ldrh	r3, [r3, #14]
 8000284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000288:	bf0c      	ite	eq
 800028a:	2301      	moveq	r3, #1
 800028c:	2300      	movne	r3, #0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	4313      	orrs	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <MCAL_SPI_Init+0x136>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	89d2      	ldrh	r2, [r2, #14]
 80002a0:	431a      	orrs	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	8a12      	ldrh	r2, [r2, #16]
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40013000 	.word	0x40013000
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	40021000 	.word	0x40021000
 80002d8:	e000e104 	.word	0xe000e104
 80002dc:	40003800 	.word	0x40003800

080002e0 <MCAL_SPI_GPIO_Set_Pins>:
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a7e      	ldr	r2, [pc, #504]	; (80004e4 <MCAL_SPI_GPIO_Set_Pins+0x204>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d176      	bne.n	80003de <MCAL_SPI_GPIO_Set_Pins+0xfe>
 80002f0:	4b7d      	ldr	r3, [pc, #500]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2b04      	cmp	r3, #4
 80002f8:	d141      	bne.n	800037e <MCAL_SPI_GPIO_Set_Pins+0x9e>
 80002fa:	4b7b      	ldr	r3, [pc, #492]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	89db      	ldrh	r3, [r3, #14]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d00e      	beq.n	8000322 <MCAL_SPI_GPIO_Set_Pins+0x42>
 8000304:	2b04      	cmp	r3, #4
 8000306:	d117      	bne.n	8000338 <MCAL_SPI_GPIO_Set_Pins+0x58>
 8000308:	2310      	movs	r3, #16
 800030a:	81bb      	strh	r3, [r7, #12]
 800030c:	2306      	movs	r3, #6
 800030e:	73bb      	strb	r3, [r7, #14]
 8000310:	2301      	movs	r3, #1
 8000312:	73fb      	strb	r3, [r7, #15]
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	4619      	mov	r1, r3
 800031a:	4874      	ldr	r0, [pc, #464]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800031c:	f000 fad7 	bl	80008ce <MCAL_GPIO_Init>
 8000320:	e00a      	b.n	8000338 <MCAL_SPI_GPIO_Set_Pins+0x58>
 8000322:	2310      	movs	r3, #16
 8000324:	81bb      	strh	r3, [r7, #12]
 8000326:	2301      	movs	r3, #1
 8000328:	73bb      	strb	r3, [r7, #14]
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	4619      	mov	r1, r3
 8000330:	486e      	ldr	r0, [pc, #440]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000332:	f000 facc 	bl	80008ce <MCAL_GPIO_Init>
 8000336:	bf00      	nop
 8000338:	2320      	movs	r3, #32
 800033a:	81bb      	strh	r3, [r7, #12]
 800033c:	2306      	movs	r3, #6
 800033e:	73bb      	strb	r3, [r7, #14]
 8000340:	2301      	movs	r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	4868      	ldr	r0, [pc, #416]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800034c:	f000 fabf 	bl	80008ce <MCAL_GPIO_Init>
 8000350:	2340      	movs	r3, #64	; 0x40
 8000352:	81bb      	strh	r3, [r7, #12]
 8000354:	2301      	movs	r3, #1
 8000356:	73bb      	strb	r3, [r7, #14]
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4619      	mov	r1, r3
 800035e:	4863      	ldr	r0, [pc, #396]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000360:	f000 fab5 	bl	80008ce <MCAL_GPIO_Init>
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	81bb      	strh	r3, [r7, #12]
 8000368:	2306      	movs	r3, #6
 800036a:	73bb      	strb	r3, [r7, #14]
 800036c:	2301      	movs	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	4619      	mov	r1, r3
 8000376:	485d      	ldr	r0, [pc, #372]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000378:	f000 faa9 	bl	80008ce <MCAL_GPIO_Init>
 800037c:	e0ad      	b.n	80004da <MCAL_SPI_GPIO_Set_Pins+0x1fa>
 800037e:	4b5a      	ldr	r3, [pc, #360]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	89db      	ldrh	r3, [r3, #14]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d109      	bne.n	800039c <MCAL_SPI_GPIO_Set_Pins+0xbc>
 8000388:	2310      	movs	r3, #16
 800038a:	81bb      	strh	r3, [r7, #12]
 800038c:	2301      	movs	r3, #1
 800038e:	73bb      	strb	r3, [r7, #14]
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	4619      	mov	r1, r3
 8000396:	4855      	ldr	r0, [pc, #340]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000398:	f000 fa99 	bl	80008ce <MCAL_GPIO_Init>
 800039c:	2320      	movs	r3, #32
 800039e:	81bb      	strh	r3, [r7, #12]
 80003a0:	2301      	movs	r3, #1
 80003a2:	73bb      	strb	r3, [r7, #14]
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	4619      	mov	r1, r3
 80003aa:	4850      	ldr	r0, [pc, #320]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80003ac:	f000 fa8f 	bl	80008ce <MCAL_GPIO_Init>
 80003b0:	2340      	movs	r3, #64	; 0x40
 80003b2:	81bb      	strh	r3, [r7, #12]
 80003b4:	2306      	movs	r3, #6
 80003b6:	73bb      	strb	r3, [r7, #14]
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
 80003bc:	f107 030c 	add.w	r3, r7, #12
 80003c0:	4619      	mov	r1, r3
 80003c2:	484a      	ldr	r0, [pc, #296]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80003c4:	f000 fa83 	bl	80008ce <MCAL_GPIO_Init>
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	81bb      	strh	r3, [r7, #12]
 80003cc:	2301      	movs	r3, #1
 80003ce:	73bb      	strb	r3, [r7, #14]
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4619      	mov	r1, r3
 80003d6:	4845      	ldr	r0, [pc, #276]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80003d8:	f000 fa79 	bl	80008ce <MCAL_GPIO_Init>
 80003dc:	e07d      	b.n	80004da <MCAL_SPI_GPIO_Set_Pins+0x1fa>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a43      	ldr	r2, [pc, #268]	; (80004f0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d146      	bne.n	8000474 <MCAL_SPI_GPIO_Set_Pins+0x194>
 80003e6:	4b40      	ldr	r3, [pc, #256]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	89db      	ldrh	r3, [r3, #14]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00f      	beq.n	8000410 <MCAL_SPI_GPIO_Set_Pins+0x130>
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d119      	bne.n	8000428 <MCAL_SPI_GPIO_Set_Pins+0x148>
 80003f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f8:	81bb      	strh	r3, [r7, #12]
 80003fa:	2306      	movs	r3, #6
 80003fc:	73bb      	strb	r3, [r7, #14]
 80003fe:	2301      	movs	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	4619      	mov	r1, r3
 8000408:	4838      	ldr	r0, [pc, #224]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800040a:	f000 fa60 	bl	80008ce <MCAL_GPIO_Init>
 800040e:	e00b      	b.n	8000428 <MCAL_SPI_GPIO_Set_Pins+0x148>
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	81bb      	strh	r3, [r7, #12]
 8000416:	2301      	movs	r3, #1
 8000418:	73bb      	strb	r3, [r7, #14]
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	4619      	mov	r1, r3
 8000420:	4834      	ldr	r0, [pc, #208]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000422:	f000 fa54 	bl	80008ce <MCAL_GPIO_Init>
 8000426:	bf00      	nop
 8000428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042c:	81bb      	strh	r3, [r7, #12]
 800042e:	2306      	movs	r3, #6
 8000430:	73bb      	strb	r3, [r7, #14]
 8000432:	2301      	movs	r3, #1
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	4619      	mov	r1, r3
 800043c:	482d      	ldr	r0, [pc, #180]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800043e:	f000 fa46 	bl	80008ce <MCAL_GPIO_Init>
 8000442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000446:	81bb      	strh	r3, [r7, #12]
 8000448:	2301      	movs	r3, #1
 800044a:	73bb      	strb	r3, [r7, #14]
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	4828      	ldr	r0, [pc, #160]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000454:	f000 fa3b 	bl	80008ce <MCAL_GPIO_Init>
 8000458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800045c:	81bb      	strh	r3, [r7, #12]
 800045e:	2306      	movs	r3, #6
 8000460:	73bb      	strb	r3, [r7, #14]
 8000462:	2301      	movs	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4619      	mov	r1, r3
 800046c:	4821      	ldr	r0, [pc, #132]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800046e:	f000 fa2e 	bl	80008ce <MCAL_GPIO_Init>
 8000472:	e032      	b.n	80004da <MCAL_SPI_GPIO_Set_Pins+0x1fa>
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	89db      	ldrh	r3, [r3, #14]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d10a      	bne.n	8000494 <MCAL_SPI_GPIO_Set_Pins+0x1b4>
 800047e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000482:	81bb      	strh	r3, [r7, #12]
 8000484:	2301      	movs	r3, #1
 8000486:	73bb      	strb	r3, [r7, #14]
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	4619      	mov	r1, r3
 800048e:	4819      	ldr	r0, [pc, #100]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000490:	f000 fa1d 	bl	80008ce <MCAL_GPIO_Init>
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	81bb      	strh	r3, [r7, #12]
 800049a:	2301      	movs	r3, #1
 800049c:	73bb      	strb	r3, [r7, #14]
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	4813      	ldr	r0, [pc, #76]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80004a6:	f000 fa12 	bl	80008ce <MCAL_GPIO_Init>
 80004aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ae:	81bb      	strh	r3, [r7, #12]
 80004b0:	2306      	movs	r3, #6
 80004b2:	73bb      	strb	r3, [r7, #14]
 80004b4:	2301      	movs	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80004c0:	f000 fa05 	bl	80008ce <MCAL_GPIO_Init>
 80004c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c8:	81bb      	strh	r3, [r7, #12]
 80004ca:	2301      	movs	r3, #1
 80004cc:	73bb      	strb	r3, [r7, #14]
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4805      	ldr	r0, [pc, #20]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80004d6:	f000 f9fa 	bl	80008ce <MCAL_GPIO_Init>
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40013000 	.word	0x40013000
 80004e8:	2000001c 	.word	0x2000001c
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40003800 	.word	0x40003800
 80004f4:	40010c00 	.word	0x40010c00

080004f8 <MCAL_SPI_Recieve_Data>:
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	4613      	mov	r3, r2
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d106      	bne.n	800051a <MCAL_SPI_Recieve_Data+0x22>
 800050c:	bf00      	nop
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f9      	beq.n	800050e <MCAL_SPI_Recieve_Data+0x16>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	b29a      	uxth	r2, r3
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	801a      	strh	r2, [r3, #0]
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <SPI1_IRQHandler>:
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <SPI1_IRQHandler+0x54>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	085b      	lsrs	r3, r3, #1
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	b2da      	uxtb	r2, r3
 8000542:	793b      	ldrb	r3, [r7, #4]
 8000544:	f362 0300 	bfi	r3, r2, #0, #1
 8000548:	713b      	strb	r3, [r7, #4]
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <SPI1_IRQHandler+0x54>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	b2da      	uxtb	r2, r3
 8000554:	793b      	ldrb	r3, [r7, #4]
 8000556:	f362 0341 	bfi	r3, r2, #1, #1
 800055a:	713b      	strb	r3, [r7, #4]
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <SPI1_IRQHandler+0x54>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	793b      	ldrb	r3, [r7, #4]
 800056a:	f362 0382 	bfi	r3, r2, #2, #1
 800056e:	713b      	strb	r3, [r7, #4]
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SPI1_IRQHandler+0x58>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	7938      	ldrb	r0, [r7, #4]
 8000578:	4798      	blx	r3
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40013000 	.word	0x40013000
 8000588:	2000001c 	.word	0x2000001c

0800058c <SPI2_IRQHandler>:
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <SPI2_IRQHandler+0x54>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	f362 0300 	bfi	r3, r2, #0, #1
 80005a4:	713b      	strb	r3, [r7, #4]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <SPI2_IRQHandler+0x54>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	793b      	ldrb	r3, [r7, #4]
 80005b2:	f362 0341 	bfi	r3, r2, #1, #1
 80005b6:	713b      	strb	r3, [r7, #4]
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <SPI2_IRQHandler+0x54>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	091b      	lsrs	r3, r3, #4
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	793b      	ldrb	r3, [r7, #4]
 80005c6:	f362 0382 	bfi	r3, r2, #2, #1
 80005ca:	713b      	strb	r3, [r7, #4]
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <SPI2_IRQHandler+0x58>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	7938      	ldrb	r0, [r7, #4]
 80005d4:	4798      	blx	r3
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40003800 	.word	0x40003800
 80005e4:	2000001c 	.word	0x2000001c

080005e8 <EXTI0_IRQHandler>:
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <EXTI0_IRQHandler+0x1c>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <EXTI0_IRQHandler+0x1c>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <EXTI0_IRQHandler+0x20>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4798      	blx	r3
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010400 	.word	0x40010400
 8000608:	20000030 	.word	0x20000030

0800060c <EXTI1_IRQHandler>:
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <EXTI1_IRQHandler+0x1c>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <EXTI1_IRQHandler+0x1c>)
 8000616:	f043 0302 	orr.w	r3, r3, #2
 800061a:	6153      	str	r3, [r2, #20]
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <EXTI1_IRQHandler+0x20>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4798      	blx	r3
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40010400 	.word	0x40010400
 800062c:	20000030 	.word	0x20000030

08000630 <EXTI2_IRQHandler>:
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI2_IRQHandler+0x1c>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI2_IRQHandler+0x1c>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6153      	str	r3, [r2, #20]
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI2_IRQHandler+0x20>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4798      	blx	r3
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010400 	.word	0x40010400
 8000650:	20000030 	.word	0x20000030

08000654 <EXTI3_IRQHandler>:
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <EXTI3_IRQHandler+0x1c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <EXTI3_IRQHandler+0x1c>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <EXTI3_IRQHandler+0x20>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4798      	blx	r3
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010400 	.word	0x40010400
 8000674:	20000030 	.word	0x20000030

08000678 <EXTI4_IRQHandler>:
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <EXTI4_IRQHandler+0x1c>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <EXTI4_IRQHandler+0x1c>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6153      	str	r3, [r2, #20]
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <EXTI4_IRQHandler+0x20>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	4798      	blx	r3
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010400 	.word	0x40010400
 8000698:	20000030 	.word	0x20000030

0800069c <EXTI9_5_IRQHandler>:
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f003 0320 	and.w	r3, r3, #32
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d008      	beq.n	80006be <EXTI9_5_IRQHandler+0x22>
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006b2:	f043 0320 	orr.w	r3, r3, #32
 80006b6:	6153      	str	r3, [r2, #20]
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <EXTI9_5_IRQHandler+0xa4>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4798      	blx	r3
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d008      	beq.n	80006dc <EXTI9_5_IRQHandler+0x40>
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a1b      	ldr	r2, [pc, #108]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <EXTI9_5_IRQHandler+0xa4>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4798      	blx	r3
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <EXTI9_5_IRQHandler+0x5e>
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <EXTI9_5_IRQHandler+0xa4>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	4798      	blx	r3
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <EXTI9_5_IRQHandler+0x7c>
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <EXTI9_5_IRQHandler+0xa4>)
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	4798      	blx	r3
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000720:	2b00      	cmp	r3, #0
 8000722:	d008      	beq.n	8000736 <EXTI9_5_IRQHandler+0x9a>
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <EXTI9_5_IRQHandler+0xa0>)
 800072a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072e:	6153      	str	r3, [r2, #20]
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <EXTI9_5_IRQHandler+0xa4>)
 8000732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000734:	4798      	blx	r3
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40010400 	.word	0x40010400
 8000740:	20000030 	.word	0x20000030

08000744 <EXTI15_10_IRQHandler>:
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000750:	2b00      	cmp	r3, #0
 8000752:	d008      	beq.n	8000766 <EXTI15_10_IRQHandler+0x22>
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a29      	ldr	r2, [pc, #164]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 800075a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800075e:	6153      	str	r3, [r2, #20]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <EXTI15_10_IRQHandler+0xc0>)
 8000762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000764:	4798      	blx	r3
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800076e:	2b00      	cmp	r3, #0
 8000770:	d008      	beq.n	8000784 <EXTI15_10_IRQHandler+0x40>
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a22      	ldr	r2, [pc, #136]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <EXTI15_10_IRQHandler+0xc0>)
 8000780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000782:	4798      	blx	r3
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <EXTI15_10_IRQHandler+0x5e>
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 8000796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800079a:	6153      	str	r3, [r2, #20]
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <EXTI15_10_IRQHandler+0xc0>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4798      	blx	r3
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d008      	beq.n	80007c0 <EXTI15_10_IRQHandler+0x7c>
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a13      	ldr	r2, [pc, #76]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <EXTI15_10_IRQHandler+0xc0>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	4798      	blx	r3
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <EXTI15_10_IRQHandler+0x9a>
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6153      	str	r3, [r2, #20]
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <EXTI15_10_IRQHandler+0xc0>)
 80007da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007dc:	4798      	blx	r3
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <EXTI15_10_IRQHandler+0xb8>
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <EXTI15_10_IRQHandler+0xbc>)
 80007f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <EXTI15_10_IRQHandler+0xc0>)
 80007f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fa:	4798      	blx	r3
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010400 	.word	0x40010400
 8000804:	20000030 	.word	0x20000030

08000808 <Get_CRLH_Position>:
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	2b80      	cmp	r3, #128	; 0x80
 8000816:	d042      	beq.n	800089e <Get_CRLH_Position+0x96>
 8000818:	2b80      	cmp	r3, #128	; 0x80
 800081a:	dc11      	bgt.n	8000840 <Get_CRLH_Position+0x38>
 800081c:	2b08      	cmp	r3, #8
 800081e:	d036      	beq.n	800088e <Get_CRLH_Position+0x86>
 8000820:	2b08      	cmp	r3, #8
 8000822:	dc06      	bgt.n	8000832 <Get_CRLH_Position+0x2a>
 8000824:	2b02      	cmp	r3, #2
 8000826:	d02e      	beq.n	8000886 <Get_CRLH_Position+0x7e>
 8000828:	2b04      	cmp	r3, #4
 800082a:	d02e      	beq.n	800088a <Get_CRLH_Position+0x82>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d028      	beq.n	8000882 <Get_CRLH_Position+0x7a>
 8000830:	e047      	b.n	80008c2 <Get_CRLH_Position+0xba>
 8000832:	2b20      	cmp	r3, #32
 8000834:	d02f      	beq.n	8000896 <Get_CRLH_Position+0x8e>
 8000836:	2b40      	cmp	r3, #64	; 0x40
 8000838:	d02f      	beq.n	800089a <Get_CRLH_Position+0x92>
 800083a:	2b10      	cmp	r3, #16
 800083c:	d029      	beq.n	8000892 <Get_CRLH_Position+0x8a>
 800083e:	e040      	b.n	80008c2 <Get_CRLH_Position+0xba>
 8000840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000844:	d033      	beq.n	80008ae <Get_CRLH_Position+0xa6>
 8000846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800084a:	dc09      	bgt.n	8000860 <Get_CRLH_Position+0x58>
 800084c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000850:	d029      	beq.n	80008a6 <Get_CRLH_Position+0x9e>
 8000852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000856:	d028      	beq.n	80008aa <Get_CRLH_Position+0xa2>
 8000858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800085c:	d021      	beq.n	80008a2 <Get_CRLH_Position+0x9a>
 800085e:	e030      	b.n	80008c2 <Get_CRLH_Position+0xba>
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	d027      	beq.n	80008b6 <Get_CRLH_Position+0xae>
 8000866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086a:	dc03      	bgt.n	8000874 <Get_CRLH_Position+0x6c>
 800086c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000870:	d01f      	beq.n	80008b2 <Get_CRLH_Position+0xaa>
 8000872:	e026      	b.n	80008c2 <Get_CRLH_Position+0xba>
 8000874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000878:	d01f      	beq.n	80008ba <Get_CRLH_Position+0xb2>
 800087a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800087e:	d01e      	beq.n	80008be <Get_CRLH_Position+0xb6>
 8000880:	e01f      	b.n	80008c2 <Get_CRLH_Position+0xba>
 8000882:	2300      	movs	r3, #0
 8000884:	e01e      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 8000886:	2304      	movs	r3, #4
 8000888:	e01c      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 800088a:	2308      	movs	r3, #8
 800088c:	e01a      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 800088e:	230c      	movs	r3, #12
 8000890:	e018      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 8000892:	2310      	movs	r3, #16
 8000894:	e016      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 8000896:	2314      	movs	r3, #20
 8000898:	e014      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 800089a:	2318      	movs	r3, #24
 800089c:	e012      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 800089e:	231c      	movs	r3, #28
 80008a0:	e010      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008a2:	2300      	movs	r3, #0
 80008a4:	e00e      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008a6:	2304      	movs	r3, #4
 80008a8:	e00c      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008aa:	2308      	movs	r3, #8
 80008ac:	e00a      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008ae:	230c      	movs	r3, #12
 80008b0:	e008      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008b2:	2310      	movs	r3, #16
 80008b4:	e006      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008b6:	2314      	movs	r3, #20
 80008b8:	e004      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008ba:	2318      	movs	r3, #24
 80008bc:	e002      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008be:	231c      	movs	r3, #28
 80008c0:	e000      	b.n	80008c4 <Get_CRLH_Position+0xbc>
 80008c2:	2300      	movs	r3, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <MCAL_GPIO_Init>:
 80008ce:	b590      	push	{r4, r7, lr}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d801      	bhi.n	80008ec <MCAL_GPIO_Init+0x1e>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	e001      	b.n	80008f0 <MCAL_GPIO_Init+0x22>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3304      	adds	r3, #4
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff86 	bl	8000808 <Get_CRLH_Position>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	230f      	movs	r3, #15
 8000902:	4093      	lsls	r3, r2
 8000904:	43da      	mvns	r2, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	401a      	ands	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	2b07      	cmp	r3, #7
 8000916:	d00b      	beq.n	8000930 <MCAL_GPIO_Init+0x62>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	2b06      	cmp	r3, #6
 800091e:	d007      	beq.n	8000930 <MCAL_GPIO_Init+0x62>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b05      	cmp	r3, #5
 8000926:	d003      	beq.n	8000930 <MCAL_GPIO_Init+0x62>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d10e      	bne.n	800094e <MCAL_GPIO_Init+0x80>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	3b04      	subs	r3, #4
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	b25a      	sxtb	r2, r3
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	78db      	ldrb	r3, [r3, #3]
 800093e:	b25b      	sxtb	r3, r3
 8000940:	4313      	orrs	r3, r2
 8000942:	b25b      	sxtb	r3, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e02c      	b.n	80009a8 <MCAL_GPIO_Init+0xda>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d003      	beq.n	800095e <MCAL_GPIO_Init+0x90>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	789b      	ldrb	r3, [r3, #2]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d107      	bne.n	800096e <MCAL_GPIO_Init+0xa0>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	789b      	ldrb	r3, [r3, #2]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e01c      	b.n	80009a8 <MCAL_GPIO_Init+0xda>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b08      	cmp	r3, #8
 8000974:	d102      	bne.n	800097c <MCAL_GPIO_Init+0xae>
 8000976:	2304      	movs	r3, #4
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	e015      	b.n	80009a8 <MCAL_GPIO_Init+0xda>
 800097c:	2308      	movs	r3, #8
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d107      	bne.n	8000998 <MCAL_GPIO_Init+0xca>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	8812      	ldrh	r2, [r2, #0]
 8000990:	431a      	orrs	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	e007      	b.n	80009a8 <MCAL_GPIO_Init+0xda>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	8812      	ldrh	r2, [r2, #0]
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	401a      	ands	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	7bfc      	ldrb	r4, [r7, #15]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff2a 	bl	8000808 <Get_CRLH_Position>
 80009b4:	4603      	mov	r3, r0
 80009b6:	fa04 f203 	lsl.w	r2, r4, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	431a      	orrs	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd90      	pop	{r4, r7, pc}

080009cc <MCAL_RCC_GetSYSCLKFreq>:
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d007      	beq.n	80009f0 <MCAL_RCC_GetSYSCLKFreq+0x24>
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d302      	bcc.n	80009ea <MCAL_RCC_GetSYSCLKFreq+0x1e>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d006      	beq.n	80009f6 <MCAL_RCC_GetSYSCLKFreq+0x2a>
 80009e8:	e008      	b.n	80009fc <MCAL_RCC_GetSYSCLKFreq+0x30>
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MCAL_RCC_GetSYSCLKFreq+0x40>)
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e005      	b.n	80009fc <MCAL_RCC_GetSYSCLKFreq+0x30>
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MCAL_RCC_GetSYSCLKFreq+0x44>)
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	e002      	b.n	80009fc <MCAL_RCC_GetSYSCLKFreq+0x30>
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MCAL_RCC_GetSYSCLKFreq+0x44>)
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	bf00      	nop
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	007a1200 	.word	0x007a1200
 8000a10:	00f42400 	.word	0x00f42400

08000a14 <MCAL_RCC_GetHCLKFreq>:
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	f7ff ffd8 	bl	80009cc <MCAL_RCC_GetSYSCLKFreq>
 8000a1c:	4601      	mov	r1, r0
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	091b      	lsrs	r3, r3, #4
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	08000fac 	.word	0x08000fac

08000a3c <MCAL_RCC_GetPCLK1Freq>:
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	f7ff ffe8 	bl	8000a14 <MCAL_RCC_GetHCLKFreq>
 8000a44:	4601      	mov	r1, r0
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	fa21 f303 	lsr.w	r3, r1, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	08000fa4 	.word	0x08000fa4

08000a64 <MCAL_RCC_GetPCLK2Freq>:
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	f7ff ffd4 	bl	8000a14 <MCAL_RCC_GetHCLKFreq>
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	0adb      	lsrs	r3, r3, #11
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	08000fa4 	.word	0x08000fa4

08000a8c <MCAL_USART_Init>:
 * Note               -support for now Asynchronous mode & clock 8MHZ
 */

USART_Config * Global_USART_config[3] = {NULL};
void MCAL_USART_Init(USART_Typedef * USARTx , USART_Config * USART_cfg)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	uint32_t pclk , BRR ;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a58      	ldr	r2, [pc, #352]	; (8000bfc <MCAL_USART_Init+0x170>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d10c      	bne.n	8000ab8 <MCAL_USART_Init+0x2c>
	{
		RCC_USART1_CLK_EN();
 8000a9e:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <MCAL_USART_Init+0x174>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <MCAL_USART_Init+0x174>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6193      	str	r3, [r2, #24]
		Global_USART_config[0] = USART_cfg ;
 8000aaa:	4a56      	ldr	r2, [pc, #344]	; (8000c04 <MCAL_USART_Init+0x178>)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	6013      	str	r3, [r2, #0]
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000ab0:	f7ff ffd8 	bl	8000a64 <MCAL_RCC_GetPCLK2Freq>
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	e020      	b.n	8000afa <MCAL_USART_Init+0x6e>
	}
	else if(USARTx ==  USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a53      	ldr	r2, [pc, #332]	; (8000c08 <MCAL_USART_Init+0x17c>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d10c      	bne.n	8000ada <MCAL_USART_Init+0x4e>
	{
		RCC_USART2_CLK_EN();
 8000ac0:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <MCAL_USART_Init+0x174>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <MCAL_USART_Init+0x174>)
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aca:	61d3      	str	r3, [r2, #28]
		Global_USART_config[1] = USART_cfg ;
 8000acc:	4a4d      	ldr	r2, [pc, #308]	; (8000c04 <MCAL_USART_Init+0x178>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	6053      	str	r3, [r2, #4]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000ad2:	f7ff ffb3 	bl	8000a3c <MCAL_RCC_GetPCLK1Freq>
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	e00f      	b.n	8000afa <MCAL_USART_Init+0x6e>
	}
	else if(USARTx == USART3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4b      	ldr	r2, [pc, #300]	; (8000c0c <MCAL_USART_Init+0x180>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <MCAL_USART_Init+0x6e>
	{
		RCC_USART3_CLK_EN();
 8000ae2:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <MCAL_USART_Init+0x174>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a46      	ldr	r2, [pc, #280]	; (8000c00 <MCAL_USART_Init+0x174>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	61d3      	str	r3, [r2, #28]
		Global_USART_config[2] = USART_cfg;
 8000aee:	4a45      	ldr	r2, [pc, #276]	; (8000c04 <MCAL_USART_Init+0x178>)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	6093      	str	r3, [r2, #8]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000af4:	f7ff ffa2 	bl	8000a3c <MCAL_RCC_GetPCLK1Freq>
 8000af8:	60f8      	str	r0, [r7, #12]
	}

	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13 ;                            // bit 13 UE: USART enable
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |=USART_cfg->USART_Mode ;            // USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	60da      	str	r2, [r3, #12]


	USARTx->CR1 |=USART_cfg->Payload_Length ;        // USARTx->CR1 bit 12 M: word length
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	7a12      	ldrb	r2, [r2, #8]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60da      	str	r2, [r3, #12]


	USARTx->CR1 |= USART_cfg->parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	7a52      	ldrb	r2, [r2, #9]
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	60da      	str	r2, [r3, #12]

	USARTx->CR2 |= USART_cfg->StopBit;              // USART_CR2 bits 13:12 STOP: stop bits
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	7a92      	ldrb	r2, [r2, #10]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	611a      	str	r2, [r3, #16]

    USARTx->CR3 |= USART_cfg->HwFlowCtl ;          // USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	7ad2      	ldrb	r2, [r2, #11]
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	615a      	str	r2, [r3, #20]

    BRR = USART_BRR_Register(pclk , USART_cfg->BaudRate);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	0119      	lsls	r1, r3, #4
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009a      	lsls	r2, r3, #2
 8000b64:	441a      	add	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b7c:	2064      	movs	r0, #100	; 0x64
 8000b7e:	fb00 f303 	mul.w	r3, r0, r3
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <MCAL_USART_Init+0x184>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	095b      	lsrs	r3, r3, #5
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	430b      	orrs	r3, r1
 8000b94:	60bb      	str	r3, [r7, #8]
    USARTx->BRR = BRR ;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	609a      	str	r2, [r3, #8]

    if(USART_cfg-> IRQ_Enable != USART_IRQ_Enable_NONE )
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	7b1b      	ldrb	r3, [r3, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d026      	beq.n	8000bf2 <MCAL_USART_Init+0x166>
    {
    	USARTx->CR1 |=(USART_cfg->IRQ_Enable);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	7b12      	ldrb	r2, [r2, #12]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60da      	str	r2, [r3, #12]

    	/* Enable NVIC for USARTx IRQ */
    	if(USARTx == USART1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <MCAL_USART_Init+0x170>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d106      	bne.n	8000bc8 <MCAL_USART_Init+0x13c>
    		NVIC_IRQ37_USART1_EN();
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MCAL_USART_Init+0x188>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MCAL_USART_Init+0x188>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6013      	str	r3, [r2, #0]

    	else if(USARTx == USART3)
    		NVIC_IRQ39_USART3_EN();

    }
}
 8000bc6:	e014      	b.n	8000bf2 <MCAL_USART_Init+0x166>
    	else if(USARTx == USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <MCAL_USART_Init+0x17c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d106      	bne.n	8000bde <MCAL_USART_Init+0x152>
    		NVIC_IRQ38_USART2_EN();
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MCAL_USART_Init+0x188>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <MCAL_USART_Init+0x188>)
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	e009      	b.n	8000bf2 <MCAL_USART_Init+0x166>
    	else if(USARTx == USART3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <MCAL_USART_Init+0x180>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d105      	bne.n	8000bf2 <MCAL_USART_Init+0x166>
    		NVIC_IRQ39_USART3_EN();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MCAL_USART_Init+0x188>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <MCAL_USART_Init+0x188>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6013      	str	r3, [r2, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40013800 	.word	0x40013800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	20000024 	.word	0x20000024
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	51eb851f 	.word	0x51eb851f
 8000c14:	e000e104 	.word	0xe000e104

08000c18 <MCAL_USART_GPIO_Set_Pins>:
	  NVIC_IRQ39_USART3_DI();
  }
}

void  MCAL_USART_GPIO_Set_Pins(USART_Typedef * USARTx)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

    GPIO_PinConfig_t pin_config ;
	if(USARTx == USART1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a2b      	ldr	r2, [pc, #172]	; (8000cd0 <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d118      	bne.n	8000c5a <MCAL_USART_GPIO_Set_Pins+0x42>
		   // PA9  TX
		   // PA10 RX
		   // PA11 CTS
		   // PA12 RTS

		pin_config.GPIO_PinNumber = GPIO_PIN_9 ;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000c3e:	f7ff fe46 	bl	80008ce <MCAL_GPIO_Init>

		pin_config.GPIO_PinNumber = GPIO_PIN_10 ;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	4820      	ldr	r0, [pc, #128]	; (8000cd4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000c54:	f7ff fe3b 	bl	80008ce <MCAL_GPIO_Init>
			pin_config.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &pin_config);
		}

	}
}
 8000c58:	e036      	b.n	8000cc8 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d116      	bne.n	8000c90 <MCAL_USART_GPIO_Set_Pins+0x78>
		pin_config.GPIO_PinNumber = GPIO_PIN_2;
 8000c62:	2304      	movs	r3, #4
 8000c64:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c66:	2306      	movs	r3, #6
 8000c68:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000c76:	f7ff fe2a 	bl	80008ce <MCAL_GPIO_Init>
		pin_config.GPIO_PinNumber = GPIO_PIN_3;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000c8a:	f7ff fe20 	bl	80008ce <MCAL_GPIO_Init>
}
 8000c8e:	e01b      	b.n	8000cc8 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d117      	bne.n	8000cc8 <MCAL_USART_GPIO_Set_Pins+0xb0>
		pin_config.GPIO_PinNumber = GPIO_PIN_10;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pin_config);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000cae:	f7ff fe0e 	bl	80008ce <MCAL_GPIO_Init>
		pin_config.GPIO_PinNumber = GPIO_PIN_11;
 8000cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb6:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pin_config);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000cc4:	f7ff fe03 	bl	80008ce <MCAL_GPIO_Init>
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <MCAL_USART_sendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_USART_sendData(USART_Typedef * USARTx,uint16_t * pTxBuffer , enum polling_Mechanism pollingEn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if(pollingEn ==  enable)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d106      	bne.n	8000d06 <MCAL_USART_sendData+0x22>
//		is cleared by a write to the USART_DR register.
//		0: Data is not transferred to the shift register
//		1: Data is transferred to the shift register)
//		Note: This bit is used during single buffer transmission

		while(!(USARTx->SR & 1<<7));
 8000cf8:	bf00      	nop
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f9      	beq.n	8000cfa <MCAL_USART_sendData+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */

	if(USARTx == USART1)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <MCAL_USART_sendData+0xb0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d111      	bne.n	8000d32 <MCAL_USART_sendData+0x4e>
	{
		if(Global_USART_config[0]->Payload_Length == USART_Payload_Length_8B)
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MCAL_USART_sendData+0xb4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	7a1b      	ldrb	r3, [r3, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d105      	bne.n	8000d24 <MCAL_USART_sendData+0x40>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	605a      	str	r2, [r3, #4]
		if(Global_USART_config[2]->Payload_Length == USART_Payload_Length_8B)
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
		else
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
	}
}
 8000d22:	e031      	b.n	8000d88 <MCAL_USART_sendData+0xa4>
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	605a      	str	r2, [r3, #4]
}
 8000d30:	e02a      	b.n	8000d88 <MCAL_USART_sendData+0xa4>
	else if(USARTx == USART2)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <MCAL_USART_sendData+0xb8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d111      	bne.n	8000d5e <MCAL_USART_sendData+0x7a>
		if(Global_USART_config[1]->Payload_Length == USART_Payload_Length_8B)
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MCAL_USART_sendData+0xb4>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	7a1b      	ldrb	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d105      	bne.n	8000d50 <MCAL_USART_sendData+0x6c>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	605a      	str	r2, [r3, #4]
}
 8000d4e:	e01b      	b.n	8000d88 <MCAL_USART_sendData+0xa4>
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	605a      	str	r2, [r3, #4]
}
 8000d5c:	e014      	b.n	8000d88 <MCAL_USART_sendData+0xa4>
	else if(USARTx == USART3)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <MCAL_USART_sendData+0xbc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d110      	bne.n	8000d88 <MCAL_USART_sendData+0xa4>
		if(Global_USART_config[2]->Payload_Length == USART_Payload_Length_8B)
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MCAL_USART_sendData+0xb4>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	7a1b      	ldrb	r3, [r3, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d105      	bne.n	8000d7c <MCAL_USART_sendData+0x98>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	605a      	str	r2, [r3, #4]
}
 8000d7a:	e005      	b.n	8000d88 <MCAL_USART_sendData+0xa4>
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	605a      	str	r2, [r3, #4]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40013800 	.word	0x40013800
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40004800 	.word	0x40004800

08000da4 <USART1_IRQHandler>:
    	}
    }
}

void USART1_IRQHandler (void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	Global_USART_config[0]->P_IRQ_CallBack();
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <USART1_IRQHandler+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	4798      	blx	r3
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000024 	.word	0x20000024

08000db8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	Global_USART_config[1]->P_IRQ_CallBack();
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	4798      	blx	r3
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000024 	.word	0x20000024

08000dcc <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	Global_USART_config[2]->P_IRQ_CallBack();
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <USART3_IRQHandler+0x10>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	4798      	blx	r3
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000024 	.word	0x20000024

08000de0 <clock_init>:
//=============macros==================

//#define MCU_Act_As_Master
#define MCU_Act_As_Slave
void clock_init()
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN() ;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <clock_init+0x30>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <clock_init+0x30>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <clock_init+0x30>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <clock_init+0x30>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <clock_init+0x30>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <clock_init+0x30>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000

08000e14 <USART_IRQ_CallBack>:
uint16_t data ;

void USART_IRQ_CallBack(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

    //Force the slave select (High) idle mode
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SPI1_CallBack>:

void SPI1_CallBack(struct S_IRQ_SRC IRQ_src)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave

	//If RX Buffer Not Empty Interrupt
	if(IRQ_src.RXNEIE)
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d009      	beq.n	8000e48 <SPI1_CallBack+0x28>
	{
		//Receive data
		MCAL_SPI_Recieve_Data(SPI1, &data, SPI_disable);
 8000e34:	2200      	movs	r2, #0
 8000e36:	4906      	ldr	r1, [pc, #24]	; (8000e50 <SPI1_CallBack+0x30>)
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <SPI1_CallBack+0x34>)
 8000e3a:	f7ff fb5d 	bl	80004f8 <MCAL_SPI_Recieve_Data>

		//Send the Received data to the terminal
		MCAL_USART_sendData(USART1, &data,enable);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4903      	ldr	r1, [pc, #12]	; (8000e50 <SPI1_CallBack+0x30>)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <SPI1_CallBack+0x38>)
 8000e44:	f7ff ff4e 	bl	8000ce4 <MCAL_USART_sendData>
	}
#endif
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000006c 	.word	0x2000006c
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40013800 	.word	0x40013800

08000e5c <main>:
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0

	clock_init();
 8000e62:	f7ff ffbd 	bl	8000de0 <clock_init>
	//=====================Init USART1===============
  USART_Config USART1_CFG;
  USART1_CFG.BaudRate        = USART_BaudRate_115200 ;
 8000e66:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e6a:	623b      	str	r3, [r7, #32]
  USART1_CFG.HwFlowCtl       = USART_HwFlowCtl_NONE ;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USART1_CFG.IRQ_Enable      =USART_IRQ_Enable_RXNEIE ;
 8000e72:	2320      	movs	r3, #32
 8000e74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  USART1_CFG.P_IRQ_CallBack  =USART_IRQ_CallBack;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <main+0x84>)
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART1_CFG.Payload_Length  = USART_Payload_Length_8B ;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  USART1_CFG.StopBit         = USART_StopBits_1 ;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  USART1_CFG.USART_Mode      = USART_Mode_TX_AND_RX ;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	773b      	strb	r3, [r7, #28]
  USART1_CFG.parity          = USART_Parity_NONE ;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  MCAL_USART_Init(USART1, &USART1_CFG);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <main+0x88>)
 8000e9a:	f7ff fdf7 	bl	8000a8c <MCAL_USART_Init>
  MCAL_USART_GPIO_Set_Pins(USART1);
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <main+0x88>)
 8000ea0:	f7ff feba 	bl	8000c18 <MCAL_USART_GPIO_Set_Pins>

  //=========================Init SPI===================

  SPI_Config SPI1_CFG ;

  SPI1_CFG.Baud_Rate     = SPI_BaudRate_Prescaler_8 ;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	81bb      	strh	r3, [r7, #12]
  SPI1_CFG.CLK_Phase     = SPI_CLK_Phase_second_edge ;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	823b      	strh	r3, [r7, #16]
  SPI1_CFG.CLK_Polarity  = SPI_CLK_Polarity_HIGH_idle ;
 8000eac:	2302      	movs	r3, #2
 8000eae:	81fb      	strh	r3, [r7, #14]
  SPI1_CFG.Communication_Mode = SPI_Communication_Mode_2line_Full_duplex ;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	80fb      	strh	r3, [r7, #6]
  SPI1_CFG.Data_Order =SPI_Data_Order_MSB_First ;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	817b      	strh	r3, [r7, #10]
  SPI1_CFG.Data_Size =SPI_Data_Size_8bit ;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	813b      	strh	r3, [r7, #8]
  SPI1_CFG.P_IRQ_CallBack =NULL ;

#endif

#ifdef MCU_Act_As_Slave
  SPI1_CFG.Device_Mode = SPI_Mode_slave ;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	80bb      	strh	r3, [r7, #4]
  SPI1_CFG.IRQ_Enable = SPI_IRQ_ENABLE_RXNEIE ;
 8000ec0:	2340      	movs	r3, #64	; 0x40
 8000ec2:	82bb      	strh	r3, [r7, #20]
  SPI1_CFG.NSS = SPI_NSS_HW_Slave ;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	827b      	strh	r3, [r7, #18]
  SPI1_CFG.P_IRQ_CallBack = SPI1_CallBack ;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <main+0x8c>)
 8000eca:	61bb      	str	r3, [r7, #24]

#endif
   MCAL_SPI_Init(SPI1, &SPI1_CFG);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <main+0x90>)
 8000ed2:	f7ff f94d 	bl	8000170 <MCAL_SPI_Init>
   MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <main+0x90>)
 8000ed8:	f7ff fa02 	bl	80002e0 <MCAL_SPI_GPIO_Set_Pins>


	while(1)
 8000edc:	e7fe      	b.n	8000edc <main+0x80>
 8000ede:	bf00      	nop
 8000ee0:	08000e15 	.word	0x08000e15
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	08000e21 	.word	0x08000e21
 8000eec:	40013000 	.word	0x40013000

08000ef0 <Reset_Handler>:
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopForever+0x2>)
 8000ef2:	4685      	mov	sp, r0
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopForever+0x6>)
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopForever+0xa>)
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopForever+0xe>)
 8000efe:	2300      	movs	r3, #0
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:
 8000f02:	58d4      	ldr	r4, [r2, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:
 8000f08:	18c4      	adds	r4, r0, r3
 8000f0a:	428c      	cmp	r4, r1
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopForever+0x12>)
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopForever+0x16>)
 8000f12:	2300      	movs	r3, #0
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:
 8000f1a:	42a2      	cmp	r2, r4
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>
 8000f1e:	f000 f811 	bl	8000f44 <__libc_init_array>
 8000f22:	f7ff ff9b 	bl	8000e5c <main>

08000f26 <LoopForever>:
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
 8000f28:	20002800 	.word	0x20002800
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000000 	.word	0x20000000
 8000f34:	08000fc4 	.word	0x08000fc4
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000070 	.word	0x20000070

08000f40 <ADC1_2_IRQHandler>:
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <__libc_init_array>:
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	2500      	movs	r5, #0
 8000f48:	4e0c      	ldr	r6, [pc, #48]	; (8000f7c <__libc_init_array+0x38>)
 8000f4a:	4c0d      	ldr	r4, [pc, #52]	; (8000f80 <__libc_init_array+0x3c>)
 8000f4c:	1ba4      	subs	r4, r4, r6
 8000f4e:	10a4      	asrs	r4, r4, #2
 8000f50:	42a5      	cmp	r5, r4
 8000f52:	d109      	bne.n	8000f68 <__libc_init_array+0x24>
 8000f54:	f000 f81a 	bl	8000f8c <_init>
 8000f58:	2500      	movs	r5, #0
 8000f5a:	4e0a      	ldr	r6, [pc, #40]	; (8000f84 <__libc_init_array+0x40>)
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <__libc_init_array+0x44>)
 8000f5e:	1ba4      	subs	r4, r4, r6
 8000f60:	10a4      	asrs	r4, r4, #2
 8000f62:	42a5      	cmp	r5, r4
 8000f64:	d105      	bne.n	8000f72 <__libc_init_array+0x2e>
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
 8000f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f6c:	4798      	blx	r3
 8000f6e:	3501      	adds	r5, #1
 8000f70:	e7ee      	b.n	8000f50 <__libc_init_array+0xc>
 8000f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f76:	4798      	blx	r3
 8000f78:	3501      	adds	r5, #1
 8000f7a:	e7f2      	b.n	8000f62 <__libc_init_array+0x1e>
 8000f7c:	08000fbc 	.word	0x08000fbc
 8000f80:	08000fbc 	.word	0x08000fbc
 8000f84:	08000fbc 	.word	0x08000fbc
 8000f88:	08000fc0 	.word	0x08000fc0

08000f8c <_init>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr

08000f98 <_fini>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr
