
STM32F103x6_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000104c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001194  08001194  0001119c  2**0
                  CONTENTS
  4 .ARM          00000000  08001194  08001194  0001119c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001194  0800119c  0001119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  0800119c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800119c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000517f  00000000  00000000  000111c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cc0  00000000  00000000  00016344  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d28  00000000  00000000  00017004  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e3e  00000000  00000000  00018118  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000287d  00000000  00000000  00018f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009965  00000000  00000000  0001b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006dc  00000000  00000000  000251b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001164 	.word	0x08001164

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001164 	.word	0x08001164

08000170 <MCAL_SPI_Init>:
 * Note 			- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 * 					- You have to configure RCC to select clock for the selected SPI Module
 */

void MCAL_SPI_Init(SPI_Typedef *SPIx , SPI_Config *cfg)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	if(SPIx == SPI1)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a53      	ldr	r2, [pc, #332]	; (80002cc <MCAL_SPI_Init+0x15c>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d10f      	bne.n	80001a2 <MCAL_SPI_Init+0x32>
	{
		G_SPI_Config[SPI1_Index] = cfg ;
 8000182:	4a53      	ldr	r2, [pc, #332]	; (80002d0 <MCAL_SPI_Init+0x160>)
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	6013      	str	r3, [r2, #0]

		//open RCC clock
		RCC_SPI1_CLK_EN();
 8000188:	4b52      	ldr	r3, [pc, #328]	; (80002d4 <MCAL_SPI_Init+0x164>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a51      	ldr	r2, [pc, #324]	; (80002d4 <MCAL_SPI_Init+0x164>)
 800018e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000192:	6193      	str	r3, [r2, #24]

		//open interrupt request for spi1
		NVIC_IRQ35_SPI1_EN();
 8000194:	4b50      	ldr	r3, [pc, #320]	; (80002d8 <MCAL_SPI_Init+0x168>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a4f      	ldr	r2, [pc, #316]	; (80002d8 <MCAL_SPI_Init+0x168>)
 800019a:	f043 0308 	orr.w	r3, r3, #8
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	e012      	b.n	80001c8 <MCAL_SPI_Init+0x58>

	}
	else if(SPIx == SPI2)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4a4d      	ldr	r2, [pc, #308]	; (80002dc <MCAL_SPI_Init+0x16c>)
 80001a6:	4293      	cmp	r3, r2
 80001a8:	d10e      	bne.n	80001c8 <MCAL_SPI_Init+0x58>
	{
		G_SPI_Config[SPI2_Index]= cfg ;
 80001aa:	4a49      	ldr	r2, [pc, #292]	; (80002d0 <MCAL_SPI_Init+0x160>)
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	6053      	str	r3, [r2, #4]

		//open RCC clock
		RCC_SPI2_CLK_EN();
 80001b0:	4b48      	ldr	r3, [pc, #288]	; (80002d4 <MCAL_SPI_Init+0x164>)
 80001b2:	69db      	ldr	r3, [r3, #28]
 80001b4:	4a47      	ldr	r2, [pc, #284]	; (80002d4 <MCAL_SPI_Init+0x164>)
 80001b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001ba:	61d3      	str	r3, [r2, #28]

		//open interrupt request for spi2
		NVIC_IRQ36_SPI2_EN();
 80001bc:	4b46      	ldr	r3, [pc, #280]	; (80002d8 <MCAL_SPI_Init+0x168>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a45      	ldr	r2, [pc, #276]	; (80002d8 <MCAL_SPI_Init+0x168>)
 80001c2:	f043 0310 	orr.w	r3, r3, #16
 80001c6:	6013      	str	r3, [r2, #0]
	}

	//select mode master or slave
	SPIx->SPI_CR1 |= cfg->Device_Mode ;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	683a      	ldr	r2, [r7, #0]
 80001ce:	8812      	ldrh	r2, [r2, #0]
 80001d0:	431a      	orrs	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	601a      	str	r2, [r3, #0]

	//select communication mode
	SPIx->SPI_CR1 |= cfg->Communication_Mode ;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	8852      	ldrh	r2, [r2, #2]
 80001de:	431a      	orrs	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	601a      	str	r2, [r3, #0]

	//select data size
	SPIx->SPI_CR1 |= cfg->Data_Size ;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	8892      	ldrh	r2, [r2, #4]
 80001ec:	431a      	orrs	r2, r3
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]

	//select data order
	SPIx->SPI_CR1 |= cfg->Data_Order ;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	88d2      	ldrh	r2, [r2, #6]
 80001fa:	431a      	orrs	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	601a      	str	r2, [r3, #0]

	//select baud rate
	SPIx->SPI_CR1 |= cfg->Baud_Rate ;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	8912      	ldrh	r2, [r2, #8]
 8000208:	431a      	orrs	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]

	//select clock polarity
	SPIx->SPI_CR1 |= cfg->CLK_Polarity ;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	8952      	ldrh	r2, [r2, #10]
 8000216:	431a      	orrs	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	601a      	str	r2, [r3, #0]

	//select clock phase
	SPIx->SPI_CR1 |= cfg->CLK_Phase ;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	8992      	ldrh	r2, [r2, #12]
 8000224:	431a      	orrs	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]

	if((cfg->NSS == SPI_NSS_HW_Slave) | (cfg->NSS == SPI_NSS_HW_Master_Output_enable) |(cfg->NSS == SPI_NSS_HW_multiMaster_enable))
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	89db      	ldrh	r3, [r3, #14]
 800022e:	2b00      	cmp	r3, #0
 8000230:	bf0c      	ite	eq
 8000232:	2301      	moveq	r3, #1
 8000234:	2300      	movne	r3, #0
 8000236:	b2da      	uxtb	r2, r3
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	89db      	ldrh	r3, [r3, #14]
 800023c:	2b04      	cmp	r3, #4
 800023e:	bf0c      	ite	eq
 8000240:	2301      	moveq	r3, #1
 8000242:	2300      	movne	r3, #0
 8000244:	b2db      	uxtb	r3, r3
 8000246:	4313      	orrs	r3, r2
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	89db      	ldrh	r3, [r3, #14]
 8000250:	2b00      	cmp	r3, #0
 8000252:	bf0c      	ite	eq
 8000254:	2301      	moveq	r3, #1
 8000256:	2300      	movne	r3, #0
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4313      	orrs	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d007      	beq.n	8000270 <MCAL_SPI_Init+0x100>
	{
		SPIx->SPI_CR2 |= cfg->NSS ;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	89d2      	ldrh	r2, [r2, #14]
 8000268:	431a      	orrs	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	e01a      	b.n	80002a6 <MCAL_SPI_Init+0x136>
	}
	else if((cfg->NSS == SPI_NSS_SW_Reset)|( cfg->NSS == SPI_NSS_SW_Set))
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	89db      	ldrh	r3, [r3, #14]
 8000274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000278:	bf0c      	ite	eq
 800027a:	2301      	moveq	r3, #1
 800027c:	2300      	movne	r3, #0
 800027e:	b2da      	uxtb	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	89db      	ldrh	r3, [r3, #14]
 8000284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000288:	bf0c      	ite	eq
 800028a:	2301      	moveq	r3, #1
 800028c:	2300      	movne	r3, #0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	4313      	orrs	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <MCAL_SPI_Init+0x136>
	{
		SPIx->SPI_CR1 |= cfg->NSS ;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	89d2      	ldrh	r2, [r2, #14]
 80002a0:	431a      	orrs	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
	}

	//interrupt enable
	SPIx->SPI_CR2 |=cfg->IRQ_Enable ;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	8a12      	ldrh	r2, [r2, #16]
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	605a      	str	r2, [r3, #4]


	//Enable the SPI
	SPIx->SPI_CR1 |= (uint16_t)(1<<6) ;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40013000 	.word	0x40013000
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	40021000 	.word	0x40021000
 80002d8:	e000e104 	.word	0xe000e104
 80002dc:	40003800 	.word	0x40003800

080002e0 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_Typedef *SPIx)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_GPIO_cfg ;
	if(SPIx == SPI1)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a7e      	ldr	r2, [pc, #504]	; (80004e4 <MCAL_SPI_GPIO_Set_Pins+0x204>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d176      	bne.n	80003de <MCAL_SPI_GPIO_Set_Pins+0xfe>
		//PA5  SPI1_SCK
		//PA6  SPI1_MISO
		//PA7  SPI1_MOSI

		//Master
		if(G_SPI_Config[SPI1_Index]->Device_Mode == SPI_Mode_Master)
 80002f0:	4b7d      	ldr	r3, [pc, #500]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2b04      	cmp	r3, #4
 80002f8:	d141      	bne.n	800037e <MCAL_SPI_GPIO_Set_Pins+0x9e>
		{
			//PA4  SPI1_NSS
			switch(G_SPI_Config[SPI1_Index]->NSS)
 80002fa:	4b7b      	ldr	r3, [pc, #492]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	89db      	ldrh	r3, [r3, #14]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d00e      	beq.n	8000322 <MCAL_SPI_GPIO_Set_Pins+0x42>
 8000304:	2b04      	cmp	r3, #4
 8000306:	d117      	bne.n	8000338 <MCAL_SPI_GPIO_Set_Pins+0x58>
			{
			//output
			case SPI_NSS_HW_Master_Output_enable:
				/* Hardware Master/NNS Output Alternate function push-pull */
				SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000308:	2310      	movs	r3, #16
 800030a:	81bb      	strh	r3, [r7, #12]
		    	SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800030c:	2306      	movs	r3, #6
 800030e:	73bb      	strb	r3, [r7, #14]
				SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000310:	2301      	movs	r3, #1
 8000312:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	4619      	mov	r1, r3
 800031a:	4874      	ldr	r0, [pc, #464]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800031c:	f000 fae5 	bl	80008ea <MCAL_GPIO_Init>
				break ;
 8000320:	e00a      	b.n	8000338 <MCAL_SPI_GPIO_Set_Pins+0x58>
			//input
			case SPI_NSS_HW_multiMaster_enable:
				/* Hardware Master/Slave Input Floating */
				SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000322:	2310      	movs	r3, #16
 8000324:	81bb      	strh	r3, [r7, #12]
		    	SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000326:	2301      	movs	r3, #1
 8000328:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	4619      	mov	r1, r3
 8000330:	486e      	ldr	r0, [pc, #440]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000332:	f000 fada 	bl	80008ea <MCAL_GPIO_Init>
				break;
 8000336:	bf00      	nop
			}
			//PA5  SPI1_SCK
			// Master Alternate function push-pull
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_5 ;
 8000338:	2320      	movs	r3, #32
 800033a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP ;
 800033c:	2306      	movs	r3, #6
 800033e:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000340:	2301      	movs	r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	4868      	ldr	r0, [pc, #416]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800034c:	f000 facd 	bl	80008ea <MCAL_GPIO_Init>

			//PA6  SPI1_MISO
			//Full duplex / master Input floating / Input pull-up
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_6;
 8000350:	2340      	movs	r3, #64	; 0x40
 8000352:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000354:	2301      	movs	r3, #1
 8000356:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4619      	mov	r1, r3
 800035e:	4863      	ldr	r0, [pc, #396]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000360:	f000 fac3 	bl	80008ea <MCAL_GPIO_Init>

			//PA7  SPI1_MOSI
			//Full duplex / master Alternate function push-pull
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_7 ;
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP ;
 8000368:	2306      	movs	r3, #6
 800036a:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800036c:	2301      	movs	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	4619      	mov	r1, r3
 8000376:	485d      	ldr	r0, [pc, #372]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000378:	f000 fab7 	bl	80008ea <MCAL_GPIO_Init>
		/* Full duplex / slave Input floating / Input pull-up */
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_15;
		SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
		MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
	}
}
 800037c:	e0ad      	b.n	80004da <MCAL_SPI_GPIO_Set_Pins+0x1fa>
			if(G_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 800037e:	4b5a      	ldr	r3, [pc, #360]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	89db      	ldrh	r3, [r3, #14]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d109      	bne.n	800039c <MCAL_SPI_GPIO_Set_Pins+0xbc>
				SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_4;
 8000388:	2310      	movs	r3, #16
 800038a:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800038c:	2301      	movs	r3, #1
 800038e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	4619      	mov	r1, r3
 8000396:	4855      	ldr	r0, [pc, #340]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000398:	f000 faa7 	bl	80008ea <MCAL_GPIO_Init>
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_5;
 800039c:	2320      	movs	r3, #32
 800039e:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003a0:	2301      	movs	r3, #1
 80003a2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	4619      	mov	r1, r3
 80003aa:	4850      	ldr	r0, [pc, #320]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80003ac:	f000 fa9d 	bl	80008ea <MCAL_GPIO_Init>
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_6;
 80003b0:	2340      	movs	r3, #64	; 0x40
 80003b2:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80003b4:	2306      	movs	r3, #6
 80003b6:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 80003bc:	f107 030c 	add.w	r3, r7, #12
 80003c0:	4619      	mov	r1, r3
 80003c2:	484a      	ldr	r0, [pc, #296]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80003c4:	f000 fa91 	bl	80008ea <MCAL_GPIO_Init>
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_7;
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003cc:	2301      	movs	r3, #1
 80003ce:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4619      	mov	r1, r3
 80003d6:	4845      	ldr	r0, [pc, #276]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80003d8:	f000 fa87 	bl	80008ea <MCAL_GPIO_Init>
}
 80003dc:	e07d      	b.n	80004da <MCAL_SPI_GPIO_Set_Pins+0x1fa>
	else if (SPIx == SPI2)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a43      	ldr	r2, [pc, #268]	; (80004f0 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d146      	bne.n	8000474 <MCAL_SPI_GPIO_Set_Pins+0x194>
		switch(G_SPI_Config[SPI1_Index]->NSS)
 80003e6:	4b40      	ldr	r3, [pc, #256]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	89db      	ldrh	r3, [r3, #14]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00f      	beq.n	8000410 <MCAL_SPI_GPIO_Set_Pins+0x130>
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d119      	bne.n	8000428 <MCAL_SPI_GPIO_Set_Pins+0x148>
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_12 ;
 80003f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f8:	81bb      	strh	r3, [r7, #12]
	    	SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80003fa:	2306      	movs	r3, #6
 80003fc:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80003fe:	2301      	movs	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	4619      	mov	r1, r3
 8000408:	4838      	ldr	r0, [pc, #224]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800040a:	f000 fa6e 	bl	80008ea <MCAL_GPIO_Init>
			break ;
 800040e:	e00b      	b.n	8000428 <MCAL_SPI_GPIO_Set_Pins+0x148>
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_12 ;
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	81bb      	strh	r3, [r7, #12]
	    	SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000416:	2301      	movs	r3, #1
 8000418:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_cfg);
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	4619      	mov	r1, r3
 8000420:	4834      	ldr	r0, [pc, #208]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000422:	f000 fa62 	bl	80008ea <MCAL_GPIO_Init>
			break;
 8000426:	bf00      	nop
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_13 ;
 8000428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042c:	81bb      	strh	r3, [r7, #12]
		SPI_GPIO_cfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP ;
 800042e:	2306      	movs	r3, #6
 8000430:	73bb      	strb	r3, [r7, #14]
		SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000432:	2301      	movs	r3, #1
 8000434:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &SPI_GPIO_cfg);
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	4619      	mov	r1, r3
 800043c:	482d      	ldr	r0, [pc, #180]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800043e:	f000 fa54 	bl	80008ea <MCAL_GPIO_Init>
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_14;
 8000442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000446:	81bb      	strh	r3, [r7, #12]
		SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000448:	2301      	movs	r3, #1
 800044a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &SPI_GPIO_cfg);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	4828      	ldr	r0, [pc, #160]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000454:	f000 fa49 	bl	80008ea <MCAL_GPIO_Init>
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_15 ;
 8000458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800045c:	81bb      	strh	r3, [r7, #12]
		SPI_GPIO_cfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP ;
 800045e:	2306      	movs	r3, #6
 8000460:	73bb      	strb	r3, [r7, #14]
		SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000462:	2301      	movs	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &SPI_GPIO_cfg);
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4619      	mov	r1, r3
 800046c:	4821      	ldr	r0, [pc, #132]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800046e:	f000 fa3c 	bl	80008ea <MCAL_GPIO_Init>
}
 8000472:	e032      	b.n	80004da <MCAL_SPI_GPIO_Set_Pins+0x1fa>
		if(G_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	89db      	ldrh	r3, [r3, #14]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d10a      	bne.n	8000494 <MCAL_SPI_GPIO_Set_Pins+0x1b4>
			SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_12;
 800047e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000482:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000484:	2301      	movs	r3, #1
 8000486:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_cfg);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	4619      	mov	r1, r3
 800048e:	4819      	ldr	r0, [pc, #100]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000490:	f000 fa2b 	bl	80008ea <MCAL_GPIO_Init>
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_13;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	81bb      	strh	r3, [r7, #12]
		SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800049a:	2301      	movs	r3, #1
 800049c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &SPI_GPIO_cfg);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	4813      	ldr	r0, [pc, #76]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80004a6:	f000 fa20 	bl	80008ea <MCAL_GPIO_Init>
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_14;
 80004aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ae:	81bb      	strh	r3, [r7, #12]
		SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80004b0:	2306      	movs	r3, #6
 80004b2:	73bb      	strb	r3, [r7, #14]
		SPI_GPIO_cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004b4:	2301      	movs	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80004c0:	f000 fa13 	bl	80008ea <MCAL_GPIO_Init>
		SPI_GPIO_cfg.GPIO_PinNumber = GPIO_PIN_15;
 80004c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c8:	81bb      	strh	r3, [r7, #12]
		SPI_GPIO_cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80004ca:	2301      	movs	r3, #1
 80004cc:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &SPI_GPIO_cfg);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4805      	ldr	r0, [pc, #20]	; (80004ec <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80004d6:	f000 fa08 	bl	80008ea <MCAL_GPIO_Init>
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40013000 	.word	0x40013000
 80004e8:	2000001c 	.word	0x2000001c
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40003800 	.word	0x40003800
 80004f4:	40010c00 	.word	0x40010c00

080004f8 <MCAL_SPI_TX_RX>:
 * @param [in] 		- Polling_En : Enable Polling or Disable it
 * @retval 			- None
 * Note 			- None
 */
void MCAL_SPI_TX_RX(SPI_Typedef *SPIx, uint16_t *pTxBuffer, enum Polling_Mechanism Polling_En)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	4613      	mov	r3, r2
 8000504:	71fb      	strb	r3, [r7, #7]
	if(Polling_En == SPI_enable)
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d106      	bne.n	800051a <MCAL_SPI_TX_RX+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_TXE));
 800050c:	bf00      	nop
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f9      	beq.n	800050e <MCAL_SPI_TX_RX+0x16>

	SPIx->SPI_DR = *(pTxBuffer);
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	60da      	str	r2, [r3, #12]

	if(Polling_En == SPI_enable)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d106      	bne.n	8000538 <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SPI_SR & SPI_SR_RXNE));
 800052a:	bf00      	nop
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f9      	beq.n	800052c <MCAL_SPI_TX_RX+0x34>

	*(pTxBuffer) = SPIx->SPI_DR ;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	b29a      	uxth	r2, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	801a      	strh	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <SPI1_IRQHandler>:

void SPI1_IRQHandler()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr ;

	irq_scr.TXEIE  = (((SPI1->SPI_SR)>>1) & 0x1);
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <SPI1_IRQHandler+0x54>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	085b      	lsrs	r3, r3, #1
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	793b      	ldrb	r3, [r7, #4]
 8000560:	f362 0300 	bfi	r3, r2, #0, #1
 8000564:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNEIE = (((SPI1->SPI_SR)>>0) & 0x1);
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <SPI1_IRQHandler+0x54>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	793b      	ldrb	r3, [r7, #4]
 8000572:	f362 0341 	bfi	r3, r2, #1, #1
 8000576:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRIE  = (((SPI1->SPI_SR)>>4) & 0x1);
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <SPI1_IRQHandler+0x54>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	091b      	lsrs	r3, r3, #4
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	793b      	ldrb	r3, [r7, #4]
 8000586:	f362 0382 	bfi	r3, r2, #2, #1
 800058a:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_scr) ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <SPI1_IRQHandler+0x58>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	7938      	ldrb	r0, [r7, #4]
 8000594:	4798      	blx	r3
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40013000 	.word	0x40013000
 80005a4:	2000001c 	.word	0x2000001c

080005a8 <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_scr ;

	irq_scr.TXEIE  = (((SPI2->SPI_SR)>>1) & 0x1);
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <SPI2_IRQHandler+0x54>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	085b      	lsrs	r3, r3, #1
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	793b      	ldrb	r3, [r7, #4]
 80005bc:	f362 0300 	bfi	r3, r2, #0, #1
 80005c0:	713b      	strb	r3, [r7, #4]
	irq_scr.RXNEIE = (((SPI2->SPI_SR)>>0) & 0x1);
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <SPI2_IRQHandler+0x54>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	793b      	ldrb	r3, [r7, #4]
 80005ce:	f362 0341 	bfi	r3, r2, #1, #1
 80005d2:	713b      	strb	r3, [r7, #4]
	irq_scr.ERRIE  = (((SPI2->SPI_SR)>>4) & 0x1);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <SPI2_IRQHandler+0x54>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	793b      	ldrb	r3, [r7, #4]
 80005e2:	f362 0382 	bfi	r3, r2, #2, #1
 80005e6:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_scr) ;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SPI2_IRQHandler+0x58>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	7938      	ldrb	r0, [r7, #4]
 80005f0:	4798      	blx	r3
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40003800 	.word	0x40003800
 8000600:	2000001c 	.word	0x2000001c

08000604 <EXTI0_IRQHandler>:
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <EXTI0_IRQHandler+0x1c>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <EXTI0_IRQHandler+0x1c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6153      	str	r3, [r2, #20]
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <EXTI0_IRQHandler+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4798      	blx	r3
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40010400 	.word	0x40010400
 8000624:	20000030 	.word	0x20000030

08000628 <EXTI1_IRQHandler>:
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <EXTI1_IRQHandler+0x1c>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <EXTI1_IRQHandler+0x1c>)
 8000632:	f043 0302 	orr.w	r3, r3, #2
 8000636:	6153      	str	r3, [r2, #20]
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <EXTI1_IRQHandler+0x20>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4798      	blx	r3
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010400 	.word	0x40010400
 8000648:	20000030 	.word	0x20000030

0800064c <EXTI2_IRQHandler>:
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <EXTI2_IRQHandler+0x1c>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <EXTI2_IRQHandler+0x1c>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6153      	str	r3, [r2, #20]
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <EXTI2_IRQHandler+0x20>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4798      	blx	r3
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010400 	.word	0x40010400
 800066c:	20000030 	.word	0x20000030

08000670 <EXTI3_IRQHandler>:
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <EXTI3_IRQHandler+0x1c>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <EXTI3_IRQHandler+0x1c>)
 800067a:	f043 0308 	orr.w	r3, r3, #8
 800067e:	6153      	str	r3, [r2, #20]
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <EXTI3_IRQHandler+0x20>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	4798      	blx	r3
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40010400 	.word	0x40010400
 8000690:	20000030 	.word	0x20000030

08000694 <EXTI4_IRQHandler>:
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <EXTI4_IRQHandler+0x1c>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <EXTI4_IRQHandler+0x1c>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6153      	str	r3, [r2, #20]
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <EXTI4_IRQHandler+0x20>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4798      	blx	r3
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010400 	.word	0x40010400
 80006b4:	20000030 	.word	0x20000030

080006b8 <EXTI9_5_IRQHandler>:
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0320 	and.w	r3, r3, #32
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d008      	beq.n	80006da <EXTI9_5_IRQHandler+0x22>
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a22      	ldr	r2, [pc, #136]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6153      	str	r3, [r2, #20]
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <EXTI9_5_IRQHandler+0xa4>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4798      	blx	r3
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d008      	beq.n	80006f8 <EXTI9_5_IRQHandler+0x40>
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <EXTI9_5_IRQHandler+0xa4>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4798      	blx	r3
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	d008      	beq.n	8000716 <EXTI9_5_IRQHandler+0x5e>
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4a13      	ldr	r2, [pc, #76]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 800070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070e:	6153      	str	r3, [r2, #20]
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <EXTI9_5_IRQHandler+0xa4>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	4798      	blx	r3
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071e:	2b00      	cmp	r3, #0
 8000720:	d008      	beq.n	8000734 <EXTI9_5_IRQHandler+0x7c>
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <EXTI9_5_IRQHandler+0xa4>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	4798      	blx	r3
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800073c:	2b00      	cmp	r3, #0
 800073e:	d008      	beq.n	8000752 <EXTI9_5_IRQHandler+0x9a>
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <EXTI9_5_IRQHandler+0xa0>)
 8000746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074a:	6153      	str	r3, [r2, #20]
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <EXTI9_5_IRQHandler+0xa4>)
 800074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000750:	4798      	blx	r3
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40010400 	.word	0x40010400
 800075c:	20000030 	.word	0x20000030

08000760 <EXTI15_10_IRQHandler>:
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <EXTI15_10_IRQHandler+0x22>
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a29      	ldr	r2, [pc, #164]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077a:	6153      	str	r3, [r2, #20]
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <EXTI15_10_IRQHandler+0xc0>)
 800077e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000780:	4798      	blx	r3
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <EXTI15_10_IRQHandler+0x40>
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a22      	ldr	r2, [pc, #136]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <EXTI15_10_IRQHandler+0xc0>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	4798      	blx	r3
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d008      	beq.n	80007be <EXTI15_10_IRQHandler+0x5e>
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b6:	6153      	str	r3, [r2, #20]
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <EXTI15_10_IRQHandler+0xc0>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4798      	blx	r3
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d008      	beq.n	80007dc <EXTI15_10_IRQHandler+0x7c>
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <EXTI15_10_IRQHandler+0xc0>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007da:	4798      	blx	r3
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d008      	beq.n	80007fa <EXTI15_10_IRQHandler+0x9a>
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6153      	str	r3, [r2, #20]
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <EXTI15_10_IRQHandler+0xc0>)
 80007f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007f8:	4798      	blx	r3
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d008      	beq.n	8000818 <EXTI15_10_IRQHandler+0xb8>
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <EXTI15_10_IRQHandler+0xbc>)
 800080c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <EXTI15_10_IRQHandler+0xc0>)
 8000814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000816:	4798      	blx	r3
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40010400 	.word	0x40010400
 8000820:	20000030 	.word	0x20000030

08000824 <Get_CRLH_Position>:
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b80      	cmp	r3, #128	; 0x80
 8000832:	d042      	beq.n	80008ba <Get_CRLH_Position+0x96>
 8000834:	2b80      	cmp	r3, #128	; 0x80
 8000836:	dc11      	bgt.n	800085c <Get_CRLH_Position+0x38>
 8000838:	2b08      	cmp	r3, #8
 800083a:	d036      	beq.n	80008aa <Get_CRLH_Position+0x86>
 800083c:	2b08      	cmp	r3, #8
 800083e:	dc06      	bgt.n	800084e <Get_CRLH_Position+0x2a>
 8000840:	2b02      	cmp	r3, #2
 8000842:	d02e      	beq.n	80008a2 <Get_CRLH_Position+0x7e>
 8000844:	2b04      	cmp	r3, #4
 8000846:	d02e      	beq.n	80008a6 <Get_CRLH_Position+0x82>
 8000848:	2b01      	cmp	r3, #1
 800084a:	d028      	beq.n	800089e <Get_CRLH_Position+0x7a>
 800084c:	e047      	b.n	80008de <Get_CRLH_Position+0xba>
 800084e:	2b20      	cmp	r3, #32
 8000850:	d02f      	beq.n	80008b2 <Get_CRLH_Position+0x8e>
 8000852:	2b40      	cmp	r3, #64	; 0x40
 8000854:	d02f      	beq.n	80008b6 <Get_CRLH_Position+0x92>
 8000856:	2b10      	cmp	r3, #16
 8000858:	d029      	beq.n	80008ae <Get_CRLH_Position+0x8a>
 800085a:	e040      	b.n	80008de <Get_CRLH_Position+0xba>
 800085c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000860:	d033      	beq.n	80008ca <Get_CRLH_Position+0xa6>
 8000862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000866:	dc09      	bgt.n	800087c <Get_CRLH_Position+0x58>
 8000868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086c:	d029      	beq.n	80008c2 <Get_CRLH_Position+0x9e>
 800086e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000872:	d028      	beq.n	80008c6 <Get_CRLH_Position+0xa2>
 8000874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000878:	d021      	beq.n	80008be <Get_CRLH_Position+0x9a>
 800087a:	e030      	b.n	80008de <Get_CRLH_Position+0xba>
 800087c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000880:	d027      	beq.n	80008d2 <Get_CRLH_Position+0xae>
 8000882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000886:	dc03      	bgt.n	8000890 <Get_CRLH_Position+0x6c>
 8000888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800088c:	d01f      	beq.n	80008ce <Get_CRLH_Position+0xaa>
 800088e:	e026      	b.n	80008de <Get_CRLH_Position+0xba>
 8000890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000894:	d01f      	beq.n	80008d6 <Get_CRLH_Position+0xb2>
 8000896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800089a:	d01e      	beq.n	80008da <Get_CRLH_Position+0xb6>
 800089c:	e01f      	b.n	80008de <Get_CRLH_Position+0xba>
 800089e:	2300      	movs	r3, #0
 80008a0:	e01e      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008a2:	2304      	movs	r3, #4
 80008a4:	e01c      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008a6:	2308      	movs	r3, #8
 80008a8:	e01a      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008aa:	230c      	movs	r3, #12
 80008ac:	e018      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008ae:	2310      	movs	r3, #16
 80008b0:	e016      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008b2:	2314      	movs	r3, #20
 80008b4:	e014      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008b6:	2318      	movs	r3, #24
 80008b8:	e012      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008ba:	231c      	movs	r3, #28
 80008bc:	e010      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008be:	2300      	movs	r3, #0
 80008c0:	e00e      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008c2:	2304      	movs	r3, #4
 80008c4:	e00c      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008c6:	2308      	movs	r3, #8
 80008c8:	e00a      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008ca:	230c      	movs	r3, #12
 80008cc:	e008      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008ce:	2310      	movs	r3, #16
 80008d0:	e006      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008d2:	2314      	movs	r3, #20
 80008d4:	e004      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008d6:	2318      	movs	r3, #24
 80008d8:	e002      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008da:	231c      	movs	r3, #28
 80008dc:	e000      	b.n	80008e0 <Get_CRLH_Position+0xbc>
 80008de:	2300      	movs	r3, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <MCAL_GPIO_Init>:
 80008ea:	b590      	push	{r4, r7, lr}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	2bff      	cmp	r3, #255	; 0xff
 8000902:	d801      	bhi.n	8000908 <MCAL_GPIO_Init+0x1e>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	e001      	b.n	800090c <MCAL_GPIO_Init+0x22>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3304      	adds	r3, #4
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff86 	bl	8000824 <Get_CRLH_Position>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	230f      	movs	r3, #15
 800091e:	4093      	lsls	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	401a      	ands	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	2b07      	cmp	r3, #7
 8000932:	d00b      	beq.n	800094c <MCAL_GPIO_Init+0x62>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b06      	cmp	r3, #6
 800093a:	d007      	beq.n	800094c <MCAL_GPIO_Init+0x62>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	2b05      	cmp	r3, #5
 8000942:	d003      	beq.n	800094c <MCAL_GPIO_Init+0x62>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	2b04      	cmp	r3, #4
 800094a:	d10e      	bne.n	800096a <MCAL_GPIO_Init+0x80>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	3b04      	subs	r3, #4
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	b25a      	sxtb	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	b25b      	sxtb	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b25b      	sxtb	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e02c      	b.n	80009c4 <MCAL_GPIO_Init+0xda>
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	789b      	ldrb	r3, [r3, #2]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d003      	beq.n	800097a <MCAL_GPIO_Init+0x90>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d107      	bne.n	800098a <MCAL_GPIO_Init+0xa0>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	789b      	ldrb	r3, [r3, #2]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e01c      	b.n	80009c4 <MCAL_GPIO_Init+0xda>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	2b08      	cmp	r3, #8
 8000990:	d102      	bne.n	8000998 <MCAL_GPIO_Init+0xae>
 8000992:	2304      	movs	r3, #4
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e015      	b.n	80009c4 <MCAL_GPIO_Init+0xda>
 8000998:	2308      	movs	r3, #8
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d107      	bne.n	80009b4 <MCAL_GPIO_Init+0xca>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	8812      	ldrh	r2, [r2, #0]
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	e007      	b.n	80009c4 <MCAL_GPIO_Init+0xda>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	7bfc      	ldrb	r4, [r7, #15]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff2a 	bl	8000824 <Get_CRLH_Position>
 80009d0:	4603      	mov	r3, r0
 80009d2:	fa04 f203 	lsl.w	r2, r4, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	431a      	orrs	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd90      	pop	{r4, r7, pc}

080009e8 <MCAL_GPIO_WritePin>:
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]
 80009f4:	4613      	mov	r3, r2
 80009f6:	707b      	strb	r3, [r7, #1]
 80009f8:	787b      	ldrb	r3, [r7, #1]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <MCAL_GPIO_WritePin+0x1e>
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	e002      	b.n	8000a0c <MCAL_GPIO_WritePin+0x24>
 8000a06:	887a      	ldrh	r2, [r7, #2]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <MCAL_RCC_GetSYSCLKFreq>:
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d007      	beq.n	8000a3c <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d302      	bcc.n	8000a36 <MCAL_RCC_GetSYSCLKFreq+0x1e>
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d006      	beq.n	8000a42 <MCAL_RCC_GetSYSCLKFreq+0x2a>
 8000a34:	e008      	b.n	8000a48 <MCAL_RCC_GetSYSCLKFreq+0x30>
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MCAL_RCC_GetSYSCLKFreq+0x40>)
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	e005      	b.n	8000a48 <MCAL_RCC_GetSYSCLKFreq+0x30>
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MCAL_RCC_GetSYSCLKFreq+0x44>)
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	e002      	b.n	8000a48 <MCAL_RCC_GetSYSCLKFreq+0x30>
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MCAL_RCC_GetSYSCLKFreq+0x44>)
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	bf00      	nop
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000
 8000a58:	007a1200 	.word	0x007a1200
 8000a5c:	00f42400 	.word	0x00f42400

08000a60 <MCAL_RCC_GetHCLKFreq>:
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	f7ff ffd8 	bl	8000a18 <MCAL_RCC_GetSYSCLKFreq>
 8000a68:	4601      	mov	r1, r0
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000a76:	5cd3      	ldrb	r3, [r2, r3]
 8000a78:	fa21 f303 	lsr.w	r3, r1, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	08001184 	.word	0x08001184

08000a88 <MCAL_RCC_GetPCLK1Freq>:
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	f7ff ffe8 	bl	8000a60 <MCAL_RCC_GetHCLKFreq>
 8000a90:	4601      	mov	r1, r0
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	fa21 f303 	lsr.w	r3, r1, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	0800117c 	.word	0x0800117c

08000ab0 <MCAL_RCC_GetPCLK2Freq>:
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	f7ff ffd4 	bl	8000a60 <MCAL_RCC_GetHCLKFreq>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	0adb      	lsrs	r3, r3, #11
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	fa21 f303 	lsr.w	r3, r1, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	0800117c 	.word	0x0800117c

08000ad8 <MCAL_USART_Init>:
 * Note               -support for now Asynchronous mode & clock 8MHZ
 */

USART_Config * Global_USART_config[3] = {NULL};
void MCAL_USART_Init(USART_Typedef * USARTx , USART_Config * USART_cfg)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	uint32_t pclk , BRR ;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a58      	ldr	r2, [pc, #352]	; (8000c48 <MCAL_USART_Init+0x170>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10c      	bne.n	8000b04 <MCAL_USART_Init+0x2c>
	{
		RCC_USART1_CLK_EN();
 8000aea:	4b58      	ldr	r3, [pc, #352]	; (8000c4c <MCAL_USART_Init+0x174>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <MCAL_USART_Init+0x174>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6193      	str	r3, [r2, #24]
		Global_USART_config[0] = USART_cfg ;
 8000af6:	4a56      	ldr	r2, [pc, #344]	; (8000c50 <MCAL_USART_Init+0x178>)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	6013      	str	r3, [r2, #0]
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000afc:	f7ff ffd8 	bl	8000ab0 <MCAL_RCC_GetPCLK2Freq>
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	e020      	b.n	8000b46 <MCAL_USART_Init+0x6e>
	}
	else if(USARTx ==  USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a53      	ldr	r2, [pc, #332]	; (8000c54 <MCAL_USART_Init+0x17c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d10c      	bne.n	8000b26 <MCAL_USART_Init+0x4e>
	{
		RCC_USART2_CLK_EN();
 8000b0c:	4b4f      	ldr	r3, [pc, #316]	; (8000c4c <MCAL_USART_Init+0x174>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <MCAL_USART_Init+0x174>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	61d3      	str	r3, [r2, #28]
		Global_USART_config[1] = USART_cfg ;
 8000b18:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <MCAL_USART_Init+0x178>)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	6053      	str	r3, [r2, #4]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000b1e:	f7ff ffb3 	bl	8000a88 <MCAL_RCC_GetPCLK1Freq>
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	e00f      	b.n	8000b46 <MCAL_USART_Init+0x6e>
	}
	else if(USARTx == USART3)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4b      	ldr	r2, [pc, #300]	; (8000c58 <MCAL_USART_Init+0x180>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10b      	bne.n	8000b46 <MCAL_USART_Init+0x6e>
	{
		RCC_USART3_CLK_EN();
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <MCAL_USART_Init+0x174>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <MCAL_USART_Init+0x174>)
 8000b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b38:	61d3      	str	r3, [r2, #28]
		Global_USART_config[2] = USART_cfg;
 8000b3a:	4a45      	ldr	r2, [pc, #276]	; (8000c50 <MCAL_USART_Init+0x178>)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	6093      	str	r3, [r2, #8]
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000b40:	f7ff ffa2 	bl	8000a88 <MCAL_RCC_GetPCLK1Freq>
 8000b44:	60f8      	str	r0, [r7, #12]
	}

	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13 ;                            // bit 13 UE: USART enable
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |=USART_cfg->USART_Mode ;            // USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]


	USARTx->CR1 |=USART_cfg->Payload_Length ;        // USARTx->CR1 bit 12 M: word length
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	7a12      	ldrb	r2, [r2, #8]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60da      	str	r2, [r3, #12]


	USARTx->CR1 |= USART_cfg->parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	7a52      	ldrb	r2, [r2, #9]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60da      	str	r2, [r3, #12]

	USARTx->CR2 |= USART_cfg->StopBit;              // USART_CR2 bits 13:12 STOP: stop bits
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	7a92      	ldrb	r2, [r2, #10]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]

    USARTx->CR3 |= USART_cfg->HwFlowCtl ;          // USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	7ad2      	ldrb	r2, [r2, #11]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	615a      	str	r2, [r3, #20]

    BRR = USART_BRR_Register(pclk , USART_cfg->BaudRate);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	0119      	lsls	r1, r3, #4
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	009a      	lsls	r2, r3, #2
 8000bb0:	441a      	add	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	fb00 f303 	mul.w	r3, r0, r3
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <MCAL_USART_Init+0x184>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	430b      	orrs	r3, r1
 8000be0:	60bb      	str	r3, [r7, #8]
    USARTx->BRR = BRR ;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	609a      	str	r2, [r3, #8]

    if(USART_cfg-> IRQ_Enable != USART_IRQ_Enable_NONE )
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	7b1b      	ldrb	r3, [r3, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d026      	beq.n	8000c3e <MCAL_USART_Init+0x166>
    {
    	USARTx->CR1 |=(USART_cfg->IRQ_Enable);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	7b12      	ldrb	r2, [r2, #12]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60da      	str	r2, [r3, #12]

    	/* Enable NVIC for USARTx IRQ */
    	if(USARTx == USART1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <MCAL_USART_Init+0x170>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d106      	bne.n	8000c14 <MCAL_USART_Init+0x13c>
    		NVIC_IRQ37_USART1_EN();
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MCAL_USART_Init+0x188>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MCAL_USART_Init+0x188>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6013      	str	r3, [r2, #0]
    	else if(USARTx == USART3)
    		NVIC_IRQ39_USART3_EN();

    }

}
 8000c12:	e014      	b.n	8000c3e <MCAL_USART_Init+0x166>
    	else if(USARTx == USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <MCAL_USART_Init+0x17c>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d106      	bne.n	8000c2a <MCAL_USART_Init+0x152>
    		NVIC_IRQ38_USART2_EN();
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MCAL_USART_Init+0x188>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <MCAL_USART_Init+0x188>)
 8000c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	e009      	b.n	8000c3e <MCAL_USART_Init+0x166>
    	else if(USARTx == USART3)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <MCAL_USART_Init+0x180>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d105      	bne.n	8000c3e <MCAL_USART_Init+0x166>
    		NVIC_IRQ39_USART3_EN();
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MCAL_USART_Init+0x188>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <MCAL_USART_Init+0x188>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6013      	str	r3, [r2, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013800 	.word	0x40013800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	20000024 	.word	0x20000024
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40004800 	.word	0x40004800
 8000c5c:	51eb851f 	.word	0x51eb851f
 8000c60:	e000e104 	.word	0xe000e104

08000c64 <MCAL_USART_GPIO_Set_Pins>:
	  NVIC_IRQ39_USART3_DI();
  }
}

void  MCAL_USART_GPIO_Set_Pins(USART_Typedef * USARTx)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

    GPIO_PinConfig_t pin_config ;
	if(USARTx == USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d118      	bne.n	8000ca6 <MCAL_USART_GPIO_Set_Pins+0x42>
		   // PA9  TX
		   // PA10 RX
		   // PA11 CTS
		   // PA12 RTS

		pin_config.GPIO_PinNumber = GPIO_PIN_9 ;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4825      	ldr	r0, [pc, #148]	; (8000d20 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000c8a:	f7ff fe2e 	bl	80008ea <MCAL_GPIO_Init>

		pin_config.GPIO_PinNumber = GPIO_PIN_10 ;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000ca0:	f7ff fe23 	bl	80008ea <MCAL_GPIO_Init>
			pin_config.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &pin_config);
		}

	}
}
 8000ca4:	e036      	b.n	8000d14 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d116      	bne.n	8000cdc <MCAL_USART_GPIO_Set_Pins+0x78>
		pin_config.GPIO_PinNumber = GPIO_PIN_2;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000cc2:	f7ff fe12 	bl	80008ea <MCAL_GPIO_Init>
		pin_config.GPIO_PinNumber = GPIO_PIN_3;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pin_config);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000cd6:	f7ff fe08 	bl	80008ea <MCAL_GPIO_Init>
}
 8000cda:	e01b      	b.n	8000d14 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d117      	bne.n	8000d14 <MCAL_USART_GPIO_Set_Pins+0xb0>
		pin_config.GPIO_PinNumber = GPIO_PIN_10;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000cea:	2306      	movs	r3, #6
 8000cec:	73bb      	strb	r3, [r7, #14]
		pin_config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pin_config);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000cfa:	f7ff fdf6 	bl	80008ea <MCAL_GPIO_Init>
		pin_config.GPIO_PinNumber = GPIO_PIN_11;
 8000cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d02:	81bb      	strh	r3, [r7, #12]
		pin_config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d04:	2308      	movs	r3, #8
 8000d06:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pin_config);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000d10:	f7ff fdeb 	bl	80008ea <MCAL_GPIO_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <MCAL_USART_sendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_USART_sendData(USART_Typedef * USARTx,uint16_t * pTxBuffer , enum polling_Mechanism pollingEn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if(pollingEn ==  enable)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d106      	bne.n	8000d52 <MCAL_USART_sendData+0x22>
//		is cleared by a write to the USART_DR register.
//		0: Data is not transferred to the shift register
//		1: Data is transferred to the shift register)
//		Note: This bit is used during single buffer transmission

		while(!(USARTx->SR & 1<<7));
 8000d44:	bf00      	nop
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f9      	beq.n	8000d46 <MCAL_USART_sendData+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */

	if(USARTx == USART1)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <MCAL_USART_sendData+0xb0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d111      	bne.n	8000d7e <MCAL_USART_sendData+0x4e>
	{
		if(Global_USART_config[0]->Payload_Length == USART_Payload_Length_8B)
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MCAL_USART_sendData+0xb4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	7a1b      	ldrb	r3, [r3, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <MCAL_USART_sendData+0x40>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	605a      	str	r2, [r3, #4]
		if(Global_USART_config[2]->Payload_Length == USART_Payload_Length_8B)
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
		else
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
	}
}
 8000d6e:	e031      	b.n	8000dd4 <MCAL_USART_sendData+0xa4>
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	605a      	str	r2, [r3, #4]
}
 8000d7c:	e02a      	b.n	8000dd4 <MCAL_USART_sendData+0xa4>
	else if(USARTx == USART2)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <MCAL_USART_sendData+0xb8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d111      	bne.n	8000daa <MCAL_USART_sendData+0x7a>
		if(Global_USART_config[1]->Payload_Length == USART_Payload_Length_8B)
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MCAL_USART_sendData+0xb4>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	7a1b      	ldrb	r3, [r3, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d105      	bne.n	8000d9c <MCAL_USART_sendData+0x6c>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	605a      	str	r2, [r3, #4]
}
 8000d9a:	e01b      	b.n	8000dd4 <MCAL_USART_sendData+0xa4>
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	605a      	str	r2, [r3, #4]
}
 8000da8:	e014      	b.n	8000dd4 <MCAL_USART_sendData+0xa4>
	else if(USARTx == USART3)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <MCAL_USART_sendData+0xbc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d110      	bne.n	8000dd4 <MCAL_USART_sendData+0xa4>
		if(Global_USART_config[2]->Payload_Length == USART_Payload_Length_8B)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MCAL_USART_sendData+0xb4>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <MCAL_USART_sendData+0x98>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	605a      	str	r2, [r3, #4]
}
 8000dc6:	e005      	b.n	8000dd4 <MCAL_USART_sendData+0xa4>
		    USARTx->DR = (*pTxBuffer) & (uint16_t)0x01FF;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	605a      	str	r2, [r3, #4]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40013800 	.word	0x40013800
 8000de4:	20000024 	.word	0x20000024
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40004800 	.word	0x40004800

08000df0 <MCAL_USART_ReceiveData>:
* 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
* 					- because it is replaced by the parity
* 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
*/
void MCAL_USART_ReceiveData(USART_Typedef * USARTx,uint16_t * pRxBuffer , enum polling_Mechanism pollingEn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
    if(pollingEn == enable)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <MCAL_USART_ReceiveData+0x22>
  	while(!(USARTx->SR & 1<<5));
 8000e04:	bf00      	nop
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f9      	beq.n	8000e06 <MCAL_USART_ReceiveData+0x16>

    if(USARTx == USART1)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <MCAL_USART_ReceiveData+0x158>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12d      	bne.n	8000e76 <MCAL_USART_ReceiveData+0x86>
    {
    	/* 8 Bits Data */
    	if(Global_USART_config[0]->Payload_Length == USART_Payload_Length_8B)
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	7a1b      	ldrb	r3, [r3, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d115      	bne.n	8000e50 <MCAL_USART_ReceiveData+0x60>
    	{
    		if(Global_USART_config[0]->parity == USART_Parity_NONE)
 8000e24:	4b49      	ldr	r3, [pc, #292]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	7a5b      	ldrb	r3, [r3, #9]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <MCAL_USART_ReceiveData+0x4e>
    		{
    			/* Just least byte is data */
    			*pRxBuffer =USARTx->DR & (uint8_t)0xFF ;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	801a      	strh	r2, [r3, #0]
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
			}

    	}
    }
}
 8000e3c:	e07e      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
        		*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	801a      	strh	r2, [r3, #0]
}
 8000e4e:	e075      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
			if (Global_USART_config[0]->parity == USART_Parity_NONE)
 8000e50:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <MCAL_USART_ReceiveData+0x76>
				*pRxBuffer = USARTx->DR ;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	801a      	strh	r2, [r3, #0]
}
 8000e64:	e06a      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	801a      	strh	r2, [r3, #0]
}
 8000e74:	e062      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
    else  if(USARTx == USART2)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4a35      	ldr	r2, [pc, #212]	; (8000f50 <MCAL_USART_ReceiveData+0x160>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12d      	bne.n	8000eda <MCAL_USART_ReceiveData+0xea>
    	if(Global_USART_config[1]->Payload_Length == USART_Payload_Length_8B)
 8000e7e:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	7a1b      	ldrb	r3, [r3, #8]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d115      	bne.n	8000eb4 <MCAL_USART_ReceiveData+0xc4>
    		if(Global_USART_config[1]->parity == USART_Parity_NONE)
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	7a5b      	ldrb	r3, [r3, #9]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <MCAL_USART_ReceiveData+0xb2>
    			*pRxBuffer =USARTx->DR & (uint8_t)0xFF ;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	801a      	strh	r2, [r3, #0]
}
 8000ea0:	e04c      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
        		*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	801a      	strh	r2, [r3, #0]
}
 8000eb2:	e043      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
			if (Global_USART_config[1]->parity == USART_Parity_NONE)
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	7a5b      	ldrb	r3, [r3, #9]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <MCAL_USART_ReceiveData+0xda>
				*pRxBuffer = USARTx->DR ;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	801a      	strh	r2, [r3, #0]
}
 8000ec8:	e038      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	801a      	strh	r2, [r3, #0]
}
 8000ed8:	e030      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
    else  if(USARTx == USART3)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <MCAL_USART_ReceiveData+0x164>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12c      	bne.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
    	if(Global_USART_config[2]->Payload_Length == USART_Payload_Length_8B)
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	7a1b      	ldrb	r3, [r3, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d115      	bne.n	8000f18 <MCAL_USART_ReceiveData+0x128>
    		if(Global_USART_config[2]->parity == USART_Parity_NONE)
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	7a5b      	ldrb	r3, [r3, #9]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <MCAL_USART_ReceiveData+0x116>
    			*pRxBuffer =USARTx->DR & (uint8_t)0xFF ;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	e01a      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
        		*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	801a      	strh	r2, [r3, #0]
}
 8000f16:	e011      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
			if (Global_USART_config[2]->parity == USART_Parity_NONE)
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MCAL_USART_ReceiveData+0x15c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	7a5b      	ldrb	r3, [r3, #9]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d105      	bne.n	8000f2e <MCAL_USART_ReceiveData+0x13e>
				*pRxBuffer = USARTx->DR ;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	801a      	strh	r2, [r3, #0]
}
 8000f2c:	e006      	b.n	8000f3c <MCAL_USART_ReceiveData+0x14c>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	801a      	strh	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	20000024 	.word	0x20000024
 8000f50:	40004400 	.word	0x40004400
 8000f54:	40004800 	.word	0x40004800

08000f58 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	Global_USART_config[0]->P_IRQ_CallBack();
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <USART1_IRQHandler+0x10>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4798      	blx	r3
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000024 	.word	0x20000024

08000f6c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	Global_USART_config[1]->P_IRQ_CallBack();
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <USART2_IRQHandler+0x10>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4798      	blx	r3
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000024 	.word	0x20000024

08000f80 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	Global_USART_config[2]->P_IRQ_CallBack();
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <USART3_IRQHandler+0x10>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	4798      	blx	r3
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000024 	.word	0x20000024

08000f94 <clock_init>:
//=============macros==================

#define MCU_Act_As_Master
//#define MCU_Act_As_Slave
void clock_init()
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN() ;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <clock_init+0x30>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <clock_init+0x30>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <clock_init+0x30>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <clock_init+0x30>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <clock_init+0x30>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <clock_init+0x30>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6193      	str	r3, [r2, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <USART_IRQ_CallBack>:
uint16_t data ;

void USART_IRQ_CallBack(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	MCAL_USART_ReceiveData(USART1, &data, disable);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <USART_IRQ_CallBack+0x3c>)
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <USART_IRQ_CallBack+0x40>)
 8000fd2:	f7ff ff0d 	bl	8000df0 <MCAL_USART_ReceiveData>
    MCAL_USART_sendData(USART1,&data, enable);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	490a      	ldr	r1, [pc, #40]	; (8001004 <USART_IRQ_CallBack+0x3c>)
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <USART_IRQ_CallBack+0x40>)
 8000fdc:	f7ff fea8 	bl	8000d30 <MCAL_USART_sendData>

    //Slave Selection (Low), to listen
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <USART_IRQ_CallBack+0x44>)
 8000fe6:	f7ff fcff 	bl	80009e8 <MCAL_GPIO_WritePin>

    // Send & Receive data
    MCAL_SPI_TX_RX(SPI1, &data, SPI_enable);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4905      	ldr	r1, [pc, #20]	; (8001004 <USART_IRQ_CallBack+0x3c>)
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <USART_IRQ_CallBack+0x48>)
 8000ff0:	f7ff fa82 	bl	80004f8 <MCAL_SPI_TX_RX>

    //Force the slave select (High) idle mode
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <USART_IRQ_CallBack+0x44>)
 8000ffa:	f7ff fcf5 	bl	80009e8 <MCAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000006c 	.word	0x2000006c
 8001008:	40013800 	.word	0x40013800
 800100c:	40010800 	.word	0x40010800
 8001010:	40013000 	.word	0x40013000

08001014 <main>:
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0

	clock_init();
 800101a:	f7ff ffbb 	bl	8000f94 <clock_init>
	//=====================Init USART1===============
  USART_Config USART1_CFG;
  USART1_CFG.BaudRate        = USART_BaudRate_115200 ;
 800101e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001022:	623b      	str	r3, [r7, #32]
  USART1_CFG.HwFlowCtl       = USART_HwFlowCtl_NONE ;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  USART1_CFG.IRQ_Enable      =USART_IRQ_Enable_RXNEIE ;
 800102a:	2320      	movs	r3, #32
 800102c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  USART1_CFG.P_IRQ_CallBack  =USART_IRQ_CallBack;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <main+0xa4>)
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART1_CFG.Payload_Length  = USART_Payload_Length_8B ;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  USART1_CFG.StopBit         = USART_StopBits_1 ;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  USART1_CFG.USART_Mode      = USART_Mode_TX_AND_RX ;
 8001040:	230c      	movs	r3, #12
 8001042:	773b      	strb	r3, [r7, #28]
  USART1_CFG.parity          = USART_Parity_NONE ;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  MCAL_USART_Init(USART1, &USART1_CFG);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	481a      	ldr	r0, [pc, #104]	; (80010bc <main+0xa8>)
 8001052:	f7ff fd41 	bl	8000ad8 <MCAL_USART_Init>
  MCAL_USART_GPIO_Set_Pins(USART1);
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <main+0xa8>)
 8001058:	f7ff fe04 	bl	8000c64 <MCAL_USART_GPIO_Set_Pins>

  //=========================Init SPI===================

  SPI_Config SPI1_CFG ;

  SPI1_CFG.Baud_Rate     = SPI_BaudRate_Prescaler_8 ;
 800105c:	2310      	movs	r3, #16
 800105e:	81bb      	strh	r3, [r7, #12]
  SPI1_CFG.CLK_Phase     = SPI_CLK_Phase_second_edge ;
 8001060:	2301      	movs	r3, #1
 8001062:	823b      	strh	r3, [r7, #16]
  SPI1_CFG.CLK_Polarity  = SPI_CLK_Polarity_HIGH_idle ;
 8001064:	2302      	movs	r3, #2
 8001066:	81fb      	strh	r3, [r7, #14]
  SPI1_CFG.Communication_Mode = SPI_Communication_Mode_2line_Full_duplex ;
 8001068:	2300      	movs	r3, #0
 800106a:	80fb      	strh	r3, [r7, #6]
  SPI1_CFG.Data_Order =SPI_Data_Order_MSB_First ;
 800106c:	2300      	movs	r3, #0
 800106e:	817b      	strh	r3, [r7, #10]
  SPI1_CFG.Data_Size =SPI_Data_Size_8bit ;
 8001070:	2300      	movs	r3, #0
 8001072:	813b      	strh	r3, [r7, #8]

#ifdef MCU_Act_As_Master
  SPI1_CFG.Device_Mode = SPI_Mode_Master ;
 8001074:	2304      	movs	r3, #4
 8001076:	80bb      	strh	r3, [r7, #4]
  SPI1_CFG.IRQ_Enable = SPI_IRQ_ENABLE_NONE ;
 8001078:	2300      	movs	r3, #0
 800107a:	82bb      	strh	r3, [r7, #20]
  SPI1_CFG.NSS = SPI_NSS_SW_Set ;
 800107c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001080:	827b      	strh	r3, [r7, #18]
  SPI1_CFG.P_IRQ_CallBack =NULL ;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]

  //configure ss pA4 by GPIO

  GPIO_PinConfig_t ss_cfg  ;

  ss_cfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8001086:	2310      	movs	r3, #16
 8001088:	803b      	strh	r3, [r7, #0]
  ss_cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800108a:	2301      	movs	r3, #1
 800108c:	70fb      	strb	r3, [r7, #3]
  ss_cfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP ;
 800108e:	2304      	movs	r3, #4
 8001090:	70bb      	strb	r3, [r7, #2]

  //Force the slave select (High) idle mode
  MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <main+0xac>)
 8001098:	f7ff fca6 	bl	80009e8 <MCAL_GPIO_WritePin>

  MCAL_GPIO_Init(GPIOA, &ss_cfg);
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <main+0xac>)
 80010a2:	f7ff fc22 	bl	80008ea <MCAL_GPIO_Init>
#endif

   MCAL_SPI_Init(SPI1, &SPI1_CFG);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <main+0xb0>)
 80010ac:	f7ff f860 	bl	8000170 <MCAL_SPI_Init>
   MCAL_SPI_GPIO_Set_Pins(SPI1);
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <main+0xb0>)
 80010b2:	f7ff f915 	bl	80002e0 <MCAL_SPI_GPIO_Set_Pins>

	while(1)
 80010b6:	e7fe      	b.n	80010b6 <main+0xa2>
 80010b8:	08000fc9 	.word	0x08000fc9
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40013000 	.word	0x40013000

080010c8 <Reset_Handler>:
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x2>)
 80010ca:	4685      	mov	sp, r0
 80010cc:	f3af 8000 	nop.w
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopForever+0x6>)
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopForever+0xa>)
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopForever+0xe>)
 80010d6:	2300      	movs	r3, #0
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:
 80010da:	58d4      	ldr	r4, [r2, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:
 80010e0:	18c4      	adds	r4, r0, r3
 80010e2:	428c      	cmp	r4, r1
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopForever+0x16>)
 80010ea:	2300      	movs	r3, #0
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:
 80010f2:	42a2      	cmp	r2, r4
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>
 80010f6:	f000 f811 	bl	800111c <__libc_init_array>
 80010fa:	f7ff ff8b 	bl	8001014 <main>

080010fe <LoopForever>:
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
 8001100:	20002800 	.word	0x20002800
 8001104:	20000000 	.word	0x20000000
 8001108:	20000000 	.word	0x20000000
 800110c:	0800119c 	.word	0x0800119c
 8001110:	20000000 	.word	0x20000000
 8001114:	20000070 	.word	0x20000070

08001118 <ADC1_2_IRQHandler>:
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <__libc_init_array>:
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	2500      	movs	r5, #0
 8001120:	4e0c      	ldr	r6, [pc, #48]	; (8001154 <__libc_init_array+0x38>)
 8001122:	4c0d      	ldr	r4, [pc, #52]	; (8001158 <__libc_init_array+0x3c>)
 8001124:	1ba4      	subs	r4, r4, r6
 8001126:	10a4      	asrs	r4, r4, #2
 8001128:	42a5      	cmp	r5, r4
 800112a:	d109      	bne.n	8001140 <__libc_init_array+0x24>
 800112c:	f000 f81a 	bl	8001164 <_init>
 8001130:	2500      	movs	r5, #0
 8001132:	4e0a      	ldr	r6, [pc, #40]	; (800115c <__libc_init_array+0x40>)
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <__libc_init_array+0x44>)
 8001136:	1ba4      	subs	r4, r4, r6
 8001138:	10a4      	asrs	r4, r4, #2
 800113a:	42a5      	cmp	r5, r4
 800113c:	d105      	bne.n	800114a <__libc_init_array+0x2e>
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001144:	4798      	blx	r3
 8001146:	3501      	adds	r5, #1
 8001148:	e7ee      	b.n	8001128 <__libc_init_array+0xc>
 800114a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800114e:	4798      	blx	r3
 8001150:	3501      	adds	r5, #1
 8001152:	e7f2      	b.n	800113a <__libc_init_array+0x1e>
 8001154:	08001194 	.word	0x08001194
 8001158:	08001194 	.word	0x08001194
 800115c:	08001194 	.word	0x08001194
 8001160:	08001198 	.word	0x08001198

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
